var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var import_sharp = __toESM(require("sharp"));
var import_pify = __toESM(require("pify"));
var import_fs = require("fs");
var import_lodash = require("lodash");
var import_electron = require("electron");
var import_Crypto = require("../../ts/Crypto");
var Bytes = __toESM(require("../../ts/Bytes"));
var import_protobuf = require("../../ts/protobuf");
var import_WebAPI = require("../../ts/textsecure/WebAPI");
var import_context = require("../../ts/windows/context");
var import_getAnimatedPngDataIfExists = require("../../ts/util/getAnimatedPngDataIfExists");
const STICKER_SIZE = 512;
const MIN_STICKER_DIMENSION = 10;
const MAX_STICKER_DIMENSION = STICKER_SIZE;
const MAX_STICKER_BYTE_LENGTH = 300 * 1024;
const { config } = import_context.SignalContext;
const WebAPI = (0, import_WebAPI.initialize)({
  url: config.serverUrl,
  storageUrl: config.storageUrl,
  updatesUrl: config.updatesUrl,
  directoryConfig: config.directoryConfig,
  cdnUrlObject: {
    0: config.cdnUrl0,
    2: config.cdnUrl2
  },
  certificateAuthority: config.certificateAuthority,
  contentProxyUrl: config.contentProxyUrl,
  proxyUrl: config.proxyUrl,
  version: config.version
});
function processStickerError(message, i18nKey) {
  const result = new Error(message);
  result.errorMessageI18nKey = i18nKey;
  return result;
}
window.processStickerImage = async (path) => {
  if (!path) {
    throw new Error(`Path ${path} is not valid!`);
  }
  const imgBuffer = await (0, import_pify.default)(import_fs.readFile)(path);
  const sharpImg = (0, import_sharp.default)(imgBuffer);
  const meta = await sharpImg.metadata();
  const { width, height } = meta;
  if (!width || !height) {
    throw processStickerError("Sticker height or width were falsy", "StickerCreator--Toasts--errorProcessing");
  }
  let contentType;
  let processedBuffer;
  const animatedPngDataIfExists = (0, import_getAnimatedPngDataIfExists.getAnimatedPngDataIfExists)(imgBuffer);
  if (animatedPngDataIfExists) {
    if (imgBuffer.byteLength > MAX_STICKER_BYTE_LENGTH) {
      throw processStickerError("Sticker file was too large", "StickerCreator--Toasts--tooLarge");
    }
    if (width !== height) {
      throw processStickerError("Sticker must be square", "StickerCreator--Toasts--APNG--notSquare");
    }
    if (width > MAX_STICKER_DIMENSION) {
      throw processStickerError("Sticker dimensions are too large", "StickerCreator--Toasts--APNG--dimensionsTooLarge");
    }
    if (width < MIN_STICKER_DIMENSION) {
      throw processStickerError("Sticker dimensions are too small", "StickerCreator--Toasts--APNG--dimensionsTooSmall");
    }
    if (animatedPngDataIfExists.numPlays !== Infinity) {
      throw processStickerError("Animated stickers must loop forever", "StickerCreator--Toasts--mustLoopForever");
    }
    contentType = "image/png";
    processedBuffer = imgBuffer;
  } else {
    contentType = "image/webp";
    processedBuffer = await sharpImg.resize({
      width: STICKER_SIZE,
      height: STICKER_SIZE,
      fit: "contain",
      background: { r: 0, g: 0, b: 0, alpha: 0 }
    }).webp().toBuffer();
    if (processedBuffer.byteLength > MAX_STICKER_BYTE_LENGTH) {
      throw processStickerError("Sticker file was too large", "StickerCreator--Toasts--tooLarge");
    }
  }
  return {
    path,
    buffer: processedBuffer,
    src: `data:${contentType};base64,${processedBuffer.toString("base64")}`,
    meta
  };
};
window.encryptAndUpload = async (manifest, stickers, cover, onProgress = import_lodash.noop) => {
  const usernameItem = await window.Signal.Data.getItemById("uuid_id");
  const oldUsernameItem = await window.Signal.Data.getItemById("number_id");
  const passwordItem = await window.Signal.Data.getItemById("password");
  const username = usernameItem?.value || oldUsernameItem?.value;
  if (!username || !passwordItem?.value) {
    const { message } = window.localeMessages["StickerCreator--Authentication--error"];
    import_electron.ipcRenderer.send("show-message-box", {
      type: "warning",
      message
    });
    throw new Error(message);
  }
  const { value: password } = passwordItem;
  const packKey = (0, import_Crypto.getRandomBytes)(32);
  const encryptionKey = (0, import_Crypto.deriveStickerPackKey)(packKey);
  const iv = (0, import_Crypto.getRandomBytes)(16);
  const server = WebAPI.connect({
    username,
    password,
    useWebSocket: false
  });
  const uniqueStickers = (0, import_lodash.uniqBy)([...stickers, { imageData: cover }], "imageData");
  const manifestProto = new import_protobuf.SignalService.StickerPack();
  manifestProto.title = manifest.title;
  manifestProto.author = manifest.author;
  manifestProto.stickers = stickers.map(({ emoji }, id) => {
    const s = new import_protobuf.SignalService.StickerPack.Sticker();
    s.id = id;
    if (emoji) {
      s.emoji = emoji;
    }
    return s;
  });
  const coverSticker = new import_protobuf.SignalService.StickerPack.Sticker();
  coverSticker.id = uniqueStickers.length === stickers.length ? 0 : uniqueStickers.length - 1;
  coverSticker.emoji = "";
  manifestProto.cover = coverSticker;
  const encryptedManifest = await encrypt(import_protobuf.SignalService.StickerPack.encode(manifestProto).finish(), encryptionKey, iv);
  const encryptedStickers = uniqueStickers.map(({ imageData }) => {
    if (!imageData?.buffer) {
      throw new Error("encryptStickers: Missing image data on sticker");
    }
    return encrypt(imageData.buffer, encryptionKey, iv);
  });
  const packId = await server.putStickers(encryptedManifest, encryptedStickers, onProgress);
  const hexKey = Bytes.toHex(packKey);
  import_electron.ipcRenderer.send("install-sticker-pack", packId, hexKey);
  return { packId, key: hexKey };
};
function encrypt(data, key, iv) {
  const { ciphertext } = (0, import_Crypto.encryptAttachment)(data, key, iv);
  return ciphertext;
}
//# sourceMappingURL=data:application/json;base64,
