var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var conversationJobQueue_exports = {};
__export(conversationJobQueue_exports, {
  ConversationJobQueue: () => ConversationJobQueue,
  conversationJobQueue: () => conversationJobQueue,
  conversationQueueJobDataSchema: () => conversationQueueJobDataSchema,
  conversationQueueJobEnum: () => conversationQueueJobEnum
});
module.exports = __toCommonJS(conversationJobQueue_exports);
var import_zod = require("zod");
var globalLogger = __toESM(require("../logging/log"));
var durations = __toESM(require("../util/durations"));
var import_exponentialBackoff = require("../util/exponentialBackoff");
var import_commonShouldJobContinue = require("./helpers/commonShouldJobContinue");
var import_InMemoryQueues = require("./helpers/InMemoryQueues");
var import_JobQueueDatabaseStore = require("./JobQueueDatabaseStore");
var import_JobQueue = require("./JobQueue");
var import_sendNormalMessage = require("./helpers/sendNormalMessage");
var import_sendDirectExpirationTimerUpdate = require("./helpers/sendDirectExpirationTimerUpdate");
var import_sendGroupUpdate = require("./helpers/sendGroupUpdate");
var import_sendDeleteForEveryone = require("./helpers/sendDeleteForEveryone");
var import_sendProfileKey = require("./helpers/sendProfileKey");
var import_sendReaction = require("./helpers/sendReaction");
var import_conversationsEnums = require("../state/ducks/conversationsEnums");
var import_sleep = require("../util/sleep");
var import_durations = require("../util/durations");
var import_Errors = require("../textsecure/Errors");
var import_assert = require("../util/assert");
var import_missingCaseError = require("../util/missingCaseError");
var import_explodePromise = require("../util/explodePromise");
const conversationQueueJobEnum = import_zod.z.enum([
  "DeleteForEveryone",
  "DirectExpirationTimerUpdate",
  "GroupUpdate",
  "NormalMessage",
  "ProfileKey",
  "Reaction"
]);
const deleteForEveryoneJobDataSchema = import_zod.z.object({
  type: import_zod.z.literal(conversationQueueJobEnum.enum.DeleteForEveryone),
  conversationId: import_zod.z.string(),
  messageId: import_zod.z.string(),
  recipients: import_zod.z.array(import_zod.z.string()),
  revision: import_zod.z.number().optional(),
  targetTimestamp: import_zod.z.number()
});
const expirationTimerUpdateJobDataSchema = import_zod.z.object({
  type: import_zod.z.literal(conversationQueueJobEnum.enum.DirectExpirationTimerUpdate),
  conversationId: import_zod.z.string(),
  expireTimer: import_zod.z.number().or(import_zod.z.undefined())
});
const groupUpdateJobDataSchema = import_zod.z.object({
  type: import_zod.z.literal(conversationQueueJobEnum.enum.GroupUpdate),
  conversationId: import_zod.z.string(),
  groupChangeBase64: import_zod.z.string().optional(),
  recipients: import_zod.z.array(import_zod.z.string()),
  revision: import_zod.z.number()
});
const normalMessageSendJobDataSchema = import_zod.z.object({
  type: import_zod.z.literal(conversationQueueJobEnum.enum.NormalMessage),
  conversationId: import_zod.z.string(),
  messageId: import_zod.z.string(),
  revision: import_zod.z.number().optional()
});
const profileKeyJobDataSchema = import_zod.z.object({
  type: import_zod.z.literal(conversationQueueJobEnum.enum.ProfileKey),
  conversationId: import_zod.z.string(),
  revision: import_zod.z.number().optional()
});
const reactionJobDataSchema = import_zod.z.object({
  type: import_zod.z.literal(conversationQueueJobEnum.enum.Reaction),
  conversationId: import_zod.z.string(),
  messageId: import_zod.z.string(),
  revision: import_zod.z.number().optional()
});
const conversationQueueJobDataSchema = import_zod.z.union([
  deleteForEveryoneJobDataSchema,
  expirationTimerUpdateJobDataSchema,
  groupUpdateJobDataSchema,
  normalMessageSendJobDataSchema,
  profileKeyJobDataSchema,
  reactionJobDataSchema
]);
const MAX_RETRY_TIME = durations.DAY;
const MAX_ATTEMPTS = (0, import_exponentialBackoff.exponentialBackoffMaxAttempts)(MAX_RETRY_TIME);
class ConversationJobQueue extends import_JobQueue.JobQueue {
  constructor() {
    super(...arguments);
    this.inMemoryQueues = new import_InMemoryQueues.InMemoryQueues();
    this.verificationWaitMap = /* @__PURE__ */ new Map();
  }
  async add(data, insert) {
    const { conversationId } = data;
    (0, import_assert.strictAssert)(window.Signal.challengeHandler, "conversationJobQueue.add: Missing challengeHandler!");
    window.Signal.challengeHandler.maybeSolve(conversationId);
    return super.add(data, insert);
  }
  parseData(data) {
    return conversationQueueJobDataSchema.parse(data);
  }
  getInMemoryQueue({
    data
  }) {
    return this.inMemoryQueues.get(data.conversationId);
  }
  startVerificationWaiter(conversationId) {
    const existing = this.verificationWaitMap.get(conversationId);
    if (existing) {
      globalLogger.info(`startVerificationWaiter: Found existing waiter for conversation ${conversationId}. Returning it.`);
      return existing.promise;
    }
    globalLogger.info(`startVerificationWaiter: Starting new waiter for conversation ${conversationId}.`);
    const { resolve, reject, promise } = (0, import_explodePromise.explodePromise)();
    this.verificationWaitMap.set(conversationId, {
      resolve,
      reject,
      promise
    });
    return promise;
  }
  resolveVerificationWaiter(conversationId) {
    const existing = this.verificationWaitMap.get(conversationId);
    if (existing) {
      globalLogger.info(`resolveVerificationWaiter: Found waiter for conversation ${conversationId}. Resolving.`);
      existing.resolve("resolveVerificationWaiter: success");
      this.verificationWaitMap.delete(conversationId);
    } else {
      globalLogger.warn(`resolveVerificationWaiter: Missing waiter for conversation ${conversationId}.`);
    }
  }
  async run({
    data,
    timestamp
  }, { attempt, log }) {
    const { type, conversationId } = data;
    const isFinalAttempt = attempt >= MAX_ATTEMPTS;
    await window.ConversationController.load();
    const conversation = window.ConversationController.get(conversationId);
    if (!conversation) {
      throw new Error(`Failed to find conversation ${conversationId}`);
    }
    let timeRemaining;
    let shouldContinue;
    let count = 0;
    while (true) {
      count += 1;
      log.info("calculating timeRemaining and shouldContinue...");
      timeRemaining = timestamp + MAX_RETRY_TIME - Date.now();
      shouldContinue = await (0, import_commonShouldJobContinue.commonShouldJobContinue)({
        attempt,
        log,
        timeRemaining,
        skipWait: count > 1
      });
      if (!shouldContinue) {
        break;
      }
      if (window.Signal.challengeHandler?.isRegistered(conversationId)) {
        log.info("captcha challenge is pending for this conversation; waiting at most 5m...");
        await Promise.race([
          this.startVerificationWaiter(conversation.id),
          (0, import_sleep.sleep)(5 * import_durations.MINUTE)
        ]);
        continue;
      }
      const verificationData = window.reduxStore.getState().conversations.verificationDataByConversation[conversationId];
      if (!verificationData) {
        break;
      }
      if (verificationData.type === import_conversationsEnums.ConversationVerificationState.PendingVerification) {
        log.info("verification is pending for this conversation; waiting at most 5m...");
        await Promise.race([
          this.startVerificationWaiter(conversation.id),
          (0, import_sleep.sleep)(5 * import_durations.MINUTE)
        ]);
        continue;
      }
      if (verificationData.type === import_conversationsEnums.ConversationVerificationState.VerificationCancelled) {
        if (verificationData.canceledAt >= timestamp) {
          log.info("cancelling job; user cancelled out of verification dialog.");
          shouldContinue = false;
        } else {
          log.info("clearing cancellation tombstone; continuing ahead with job");
          window.reduxActions.conversations.clearCancelledConversationVerification(conversation.id);
        }
        break;
      }
      throw (0, import_missingCaseError.missingCaseError)(verificationData);
    }
    const { messaging } = window.textsecure;
    if (!messaging) {
      throw new Error("messaging interface is not available!");
    }
    const jobBundle = {
      messaging,
      isFinalAttempt,
      shouldContinue,
      timeRemaining,
      timestamp,
      log
    };
    const jobSet = conversationQueueJobEnum.enum;
    try {
      switch (type) {
        case jobSet.DeleteForEveryone:
          await (0, import_sendDeleteForEveryone.sendDeleteForEveryone)(conversation, jobBundle, data);
          break;
        case jobSet.DirectExpirationTimerUpdate:
          await (0, import_sendDirectExpirationTimerUpdate.sendDirectExpirationTimerUpdate)(conversation, jobBundle, data);
          break;
        case jobSet.GroupUpdate:
          await (0, import_sendGroupUpdate.sendGroupUpdate)(conversation, jobBundle, data);
          break;
        case jobSet.NormalMessage:
          await (0, import_sendNormalMessage.sendNormalMessage)(conversation, jobBundle, data);
          break;
        case jobSet.ProfileKey:
          await (0, import_sendProfileKey.sendProfileKey)(conversation, jobBundle, data);
          break;
        case jobSet.Reaction:
          await (0, import_sendReaction.sendReaction)(conversation, jobBundle, data);
          break;
        default: {
          const problem = type;
          log.error(`conversationJobQueue: Got job with type ${problem}; Cancelling job.`);
        }
      }
    } catch (error) {
      const untrustedUuids = [];
      const processError = /* @__PURE__ */ __name((toProcess) => {
        if (toProcess instanceof import_Errors.OutgoingIdentityKeyError) {
          const failedConversation = window.ConversationController.getOrCreate(toProcess.identifier, "private");
          (0, import_assert.strictAssert)(failedConversation, "Conversation should be created");
          const uuid = failedConversation.get("uuid");
          if (!uuid) {
            log.error(`failedConversation: Conversation ${failedConversation.idForLogging()} missing UUID!`);
            return;
          }
          untrustedUuids.push(uuid);
        } else if (toProcess instanceof import_Errors.SendMessageChallengeError) {
          window.Signal.challengeHandler?.register({
            conversationId,
            createdAt: Date.now(),
            retryAt: toProcess.retryAt,
            token: toProcess.data?.token
          }, toProcess.data);
        }
      }, "processError");
      processError(error);
      if (error instanceof import_Errors.SendMessageProtoError) {
        (error.errors || []).forEach(processError);
      }
      if (untrustedUuids.length) {
        log.error(`Send failed because ${untrustedUuids.length} conversation(s) were untrusted. Adding to verification list.`);
        window.reduxActions.conversations.conversationStoppedByMissingVerification({
          conversationId: conversation.id,
          untrustedUuids
        });
      }
      throw error;
    }
  }
}
const conversationJobQueue = new ConversationJobQueue({
  store: import_JobQueueDatabaseStore.jobQueueDatabaseStore,
  queueType: "conversation",
  maxAttempts: MAX_ATTEMPTS
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ConversationJobQueue,
  conversationJobQueue,
  conversationQueueJobDataSchema,
  conversationQueueJobEnum
});
//# sourceMappingURL=data:application/json;base64,
