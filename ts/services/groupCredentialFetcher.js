var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var groupCredentialFetcher_exports = {};
__export(groupCredentialFetcher_exports, {
  GROUP_CREDENTIALS_KEY: () => GROUP_CREDENTIALS_KEY,
  getCredentialsForToday: () => getCredentialsForToday,
  getDatesForRequest: () => getDatesForRequest,
  initializeGroupCredentialFetcher: () => initializeGroupCredentialFetcher,
  maybeFetchNewCredentials: () => maybeFetchNewCredentials,
  runWithRetry: () => runWithRetry,
  sortCredentials: () => sortCredentials
});
module.exports = __toCommonJS(groupCredentialFetcher_exports);
var import_lodash = require("lodash");
var import_zkgroup = require("@signalapp/libsignal-client/zkgroup");
var import_zkgroup2 = require("../util/zkgroup");
var durations = __toESM(require("../util/durations"));
var import_BackOff = require("../util/BackOff");
var import_sleep = require("../util/sleep");
var import_UUID = require("../types/UUID");
var log = __toESM(require("../logging/log"));
const GROUP_CREDENTIALS_KEY = "groupCredentials";
function getTodayInEpoch() {
  return Math.floor(Date.now() / durations.DAY);
}
let started = false;
async function initializeGroupCredentialFetcher() {
  if (started) {
    return;
  }
  log.info("initializeGroupCredentialFetcher: starting...");
  started = true;
  await runWithRetry(maybeFetchNewCredentials, {
    scheduleAnother: 4 * durations.HOUR
  });
}
const BACKOFF_TIMEOUTS = [
  durations.SECOND,
  5 * durations.SECOND,
  30 * durations.SECOND,
  2 * durations.MINUTE,
  5 * durations.MINUTE
];
async function runWithRetry(fn, options = {}) {
  const backOff = new import_BackOff.BackOff(BACKOFF_TIMEOUTS);
  while (true) {
    try {
      await fn();
      return;
    } catch (error) {
      const wait = backOff.getAndIncrement();
      log.info(`runWithRetry: ${fn.name} failed. Waiting ${wait}ms for retry. Error: ${error.stack}`);
      await (0, import_sleep.sleep)(wait);
    }
  }
  const duration = options.scheduleAnother;
  if (duration) {
    log.info(`runWithRetry: scheduling another run with a setTimeout duration of ${duration}ms`);
    setTimeout(async () => runWithRetry(fn, options), duration);
  }
}
function getCredentialsForToday(data) {
  if (!data) {
    throw new Error("getCredentialsForToday: No credentials fetched!");
  }
  const todayInEpoch = getTodayInEpoch();
  const todayIndex = data.findIndex((item) => item.redemptionTime === todayInEpoch);
  if (todayIndex < 0) {
    throw new Error("getCredentialsForToday: Cannot find credentials for today");
  }
  return {
    today: data[todayIndex],
    tomorrow: data[todayIndex + 1]
  };
}
async function maybeFetchNewCredentials() {
  const uuid = window.textsecure.storage.user.getUuid()?.toString();
  if (!uuid) {
    log.info("maybeFetchCredentials: no UUID, returning early");
    return;
  }
  const previous = window.storage.get(GROUP_CREDENTIALS_KEY);
  const requestDates = getDatesForRequest(previous);
  if (!requestDates) {
    log.info("maybeFetchCredentials: no new credentials needed");
    return;
  }
  const accountManager = window.getAccountManager();
  if (!accountManager) {
    log.info("maybeFetchCredentials: unable to get AccountManager");
    return;
  }
  const { startDay, endDay } = requestDates;
  log.info(`maybeFetchCredentials: fetching credentials for ${startDay} through ${endDay}`);
  const serverPublicParamsBase64 = window.getServerPublicParams();
  const clientZKAuthOperations = (0, import_zkgroup2.getClientZkAuthOperations)(serverPublicParamsBase64);
  const newCredentials = sortCredentials(await accountManager.getGroupCredentials(startDay, endDay, import_UUID.UUIDKind.ACI)).map((item) => {
    const authCredential = clientZKAuthOperations.receiveAuthCredential(uuid, item.redemptionTime, new import_zkgroup.AuthCredentialResponse(Buffer.from(item.credential, "base64")));
    const credential = authCredential.serialize().toString("base64");
    return {
      redemptionTime: item.redemptionTime,
      credential
    };
  });
  const todayInEpoch = getTodayInEpoch();
  const previousCleaned = previous ? previous.filter((item) => item.redemptionTime >= todayInEpoch) : [];
  const finalCredentials = [...previousCleaned, ...newCredentials];
  log.info("maybeFetchCredentials: Saving new credentials...");
  window.storage.put(GROUP_CREDENTIALS_KEY, finalCredentials);
  log.info("maybeFetchCredentials: Save complete.");
}
function getDatesForRequest(data) {
  const todayInEpoch = getTodayInEpoch();
  const oneWeekOut = todayInEpoch + 7;
  const lastCredential = (0, import_lodash.last)(data);
  if (!lastCredential || lastCredential.redemptionTime < todayInEpoch) {
    return {
      startDay: todayInEpoch,
      endDay: oneWeekOut
    };
  }
  if (lastCredential.redemptionTime >= oneWeekOut) {
    return void 0;
  }
  return {
    startDay: lastCredential.redemptionTime + 1,
    endDay: oneWeekOut
  };
}
function sortCredentials(data) {
  return (0, import_lodash.sortBy)(data, (item) => item.redemptionTime);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  GROUP_CREDENTIALS_KEY,
  getCredentialsForToday,
  getDatesForRequest,
  initializeGroupCredentialFetcher,
  maybeFetchNewCredentials,
  runWithRetry,
  sortCredentials
});
//# sourceMappingURL=data:application/json;base64,
