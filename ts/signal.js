var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var signal_exports = {};
__export(signal_exports, {
  initializeMigrations: () => initializeMigrations,
  setup: () => setup
});
module.exports = __toCommonJS(signal_exports);
var Crypto = __toESM(require("./Crypto"));
var Curve = __toESM(require("./Curve"));
var import_ConversationController = require("./ConversationController");
var import_Client = __toESM(require("./sql/Client"));
var Groups = __toESM(require("./groups"));
var OS = __toESM(require("./OS"));
var RemoteConfig = __toESM(require("./RemoteConfig"));
var Util = __toESM(require("./util"));
var import_AttachmentList = require("./components/conversation/AttachmentList");
var import_ChatColorPicker = require("./components/ChatColorPicker");
var import_ConfirmationDialog = require("./components/ConfirmationDialog");
var import_ContactModal = require("./components/conversation/ContactModal");
var import_Emojify = require("./components/conversation/Emojify");
var import_MessageDetail = require("./components/conversation/MessageDetail");
var import_Quote = require("./components/conversation/Quote");
var import_StagedLinkPreview = require("./components/conversation/StagedLinkPreview");
var import_DisappearingTimeDialog = require("./components/DisappearingTimeDialog");
var import_SystemTraySettingsCheckboxes = require("./components/conversation/SystemTraySettingsCheckboxes");
var import_createChatColorPicker = require("./state/roots/createChatColorPicker");
var import_createConversationDetails = require("./state/roots/createConversationDetails");
var import_createApp = require("./state/roots/createApp");
var import_createForwardMessageModal = require("./state/roots/createForwardMessageModal");
var import_createGroupLinkManagement = require("./state/roots/createGroupLinkManagement");
var import_createGroupV1MigrationModal = require("./state/roots/createGroupV1MigrationModal");
var import_createGroupV2JoinModal = require("./state/roots/createGroupV2JoinModal");
var import_createMessageDetail = require("./state/roots/createMessageDetail");
var import_createConversationNotificationsSettings = require("./state/roots/createConversationNotificationsSettings");
var import_createGroupV2Permissions = require("./state/roots/createGroupV2Permissions");
var import_createPendingInvites = require("./state/roots/createPendingInvites");
var import_createSafetyNumberViewer = require("./state/roots/createSafetyNumberViewer");
var import_createStickerManager = require("./state/roots/createStickerManager");
var import_createStickerPreviewModal = require("./state/roots/createStickerPreviewModal");
var import_createShortcutGuideModal = require("./state/roots/createShortcutGuideModal");
var import_createStore = require("./state/createStore");
var appDuck = __toESM(require("./state/ducks/app"));
var callingDuck = __toESM(require("./state/ducks/calling"));
var conversationsDuck = __toESM(require("./state/ducks/conversations"));
var emojisDuck = __toESM(require("./state/ducks/emojis"));
var expirationDuck = __toESM(require("./state/ducks/expiration"));
var itemsDuck = __toESM(require("./state/ducks/items"));
var linkPreviewsDuck = __toESM(require("./state/ducks/linkPreviews"));
var networkDuck = __toESM(require("./state/ducks/network"));
var searchDuck = __toESM(require("./state/ducks/search"));
var stickersDuck = __toESM(require("./state/ducks/stickers"));
var updatesDuck = __toESM(require("./state/ducks/updates"));
var userDuck = __toESM(require("./state/ducks/user"));
var conversationsSelectors = __toESM(require("./state/selectors/conversations"));
var searchSelectors = __toESM(require("./state/selectors/search"));
var TypesAttachment = __toESM(require("./types/Attachment"));
var VisualAttachment = __toESM(require("./types/VisualAttachment"));
var MessageType = __toESM(require("./types/Message2"));
var import_UUID = require("./types/UUID");
var import_Address = require("./types/Address");
var import_QualifiedAddress = require("./types/QualifiedAddress");
var import_groupCredentialFetcher = require("./services/groupCredentialFetcher");
var import_networkObserver = require("./services/networkObserver");
var import_updateListener = require("./services/updateListener");
var import_calling = require("./services/calling");
var import_storage = require("./services/storage");
function initializeMigrations({
  getRegionCode,
  Attachments,
  Type,
  VisualType,
  logger,
  userDataPath
}) {
  if (!Attachments) {
    throw new Error("initializeMigrations: Missing provided attachments!");
  }
  const {
    createAbsolutePathGetter,
    createReader,
    createWriterForExisting,
    createWriterForNew,
    createDoesExist,
    getAvatarsPath,
    getDraftPath,
    getPath,
    getStickersPath,
    getBadgesPath,
    getTempPath,
    openFileInFolder,
    saveAttachmentToDisk
  } = Attachments;
  const {
    getImageDimensions,
    makeImageThumbnail,
    makeObjectUrl,
    makeVideoScreenshot,
    revokeObjectUrl
  } = VisualType;
  const attachmentsPath = getPath(userDataPath);
  const readAttachmentData = createReader(attachmentsPath);
  const loadAttachmentData = Type.loadData(readAttachmentData);
  const loadContactData = MessageType.loadContactData(loadAttachmentData);
  const loadPreviewData = MessageType.loadPreviewData(loadAttachmentData);
  const loadQuoteData = MessageType.loadQuoteData(loadAttachmentData);
  const loadStickerData = MessageType.loadStickerData(loadAttachmentData);
  const getAbsoluteAttachmentPath = createAbsolutePathGetter(attachmentsPath);
  const deleteOnDisk = Attachments.createDeleter(attachmentsPath);
  const writeExistingAttachmentData = createWriterForExisting(attachmentsPath);
  const writeNewAttachmentData = createWriterForNew(attachmentsPath);
  const copyIntoAttachmentsDirectory = Attachments.copyIntoAttachmentsDirectory(attachmentsPath);
  const doesAttachmentExist = createDoesExist(attachmentsPath);
  const stickersPath = getStickersPath(userDataPath);
  const writeNewStickerData = createWriterForNew(stickersPath);
  const getAbsoluteStickerPath = createAbsolutePathGetter(stickersPath);
  const deleteSticker = Attachments.createDeleter(stickersPath);
  const readStickerData = createReader(stickersPath);
  const badgesPath = getBadgesPath(userDataPath);
  const getAbsoluteBadgeImageFilePath = createAbsolutePathGetter(badgesPath);
  const writeNewBadgeImageFileData = createWriterForNew(badgesPath, ".svg");
  const tempPath = getTempPath(userDataPath);
  const getAbsoluteTempPath = createAbsolutePathGetter(tempPath);
  const writeNewTempData = createWriterForNew(tempPath);
  const deleteTempFile = Attachments.createDeleter(tempPath);
  const readTempData = createReader(tempPath);
  const copyIntoTempDirectory = Attachments.copyIntoAttachmentsDirectory(tempPath);
  const draftPath = getDraftPath(userDataPath);
  const getAbsoluteDraftPath = createAbsolutePathGetter(draftPath);
  const writeNewDraftData = createWriterForNew(draftPath);
  const deleteDraftFile = Attachments.createDeleter(draftPath);
  const readDraftData = createReader(draftPath);
  const avatarsPath = getAvatarsPath(userDataPath);
  const getAbsoluteAvatarPath = createAbsolutePathGetter(avatarsPath);
  const writeNewAvatarData = createWriterForNew(avatarsPath);
  const deleteAvatar = Attachments.createDeleter(avatarsPath);
  return {
    attachmentsPath,
    copyIntoAttachmentsDirectory,
    copyIntoTempDirectory,
    deleteAttachmentData: deleteOnDisk,
    deleteAvatar,
    deleteDraftFile,
    deleteExternalMessageFiles: MessageType.deleteAllExternalFiles({
      deleteAttachmentData: Type.deleteData(deleteOnDisk),
      deleteOnDisk
    }),
    deleteSticker,
    deleteTempFile,
    doesAttachmentExist,
    getAbsoluteAttachmentPath,
    getAbsoluteAvatarPath,
    getAbsoluteBadgeImageFilePath,
    getAbsoluteDraftPath,
    getAbsoluteStickerPath,
    getAbsoluteTempPath,
    loadAttachmentData,
    loadContactData,
    loadMessage: MessageType.createAttachmentLoader(loadAttachmentData),
    loadPreviewData,
    loadQuoteData,
    loadStickerData,
    openFileInFolder,
    readAttachmentData,
    readDraftData,
    readStickerData,
    readTempData,
    saveAttachmentToDisk,
    processNewAttachment: (attachment) => MessageType.processNewAttachment(attachment, {
      writeNewAttachmentData,
      getAbsoluteAttachmentPath,
      makeObjectUrl,
      revokeObjectUrl,
      getImageDimensions,
      makeImageThumbnail,
      makeVideoScreenshot,
      logger
    }),
    processNewSticker: (stickerData) => MessageType.processNewSticker(stickerData, {
      writeNewStickerData,
      getAbsoluteStickerPath,
      getImageDimensions,
      logger
    }),
    processNewEphemeralSticker: (stickerData) => MessageType.processNewSticker(stickerData, {
      writeNewStickerData: writeNewTempData,
      getAbsoluteStickerPath: getAbsoluteTempPath,
      getImageDimensions,
      logger
    }),
    upgradeMessageSchema: (message, options = {}) => {
      const { maxVersion } = options;
      return MessageType.upgradeSchema(message, {
        writeNewAttachmentData,
        getRegionCode,
        getAbsoluteAttachmentPath,
        makeObjectUrl,
        revokeObjectUrl,
        getImageDimensions,
        makeImageThumbnail,
        makeVideoScreenshot,
        logger,
        maxVersion,
        getAbsoluteStickerPath,
        writeNewStickerData
      });
    },
    writeMessageAttachments: MessageType.createAttachmentDataWriter({
      writeExistingAttachmentData,
      logger
    }),
    writeNewAttachmentData: createWriterForNew(attachmentsPath),
    writeNewAvatarData,
    writeNewDraftData,
    writeNewBadgeImageFileData
  };
}
const setup = /* @__PURE__ */ __name((options) => {
  const { Attachments, getRegionCode, logger, userDataPath } = options;
  const Migrations = initializeMigrations({
    getRegionCode,
    Attachments,
    Type: TypesAttachment,
    VisualType: VisualAttachment,
    logger,
    userDataPath
  });
  const Components = {
    AttachmentList: import_AttachmentList.AttachmentList,
    ChatColorPicker: import_ChatColorPicker.ChatColorPicker,
    ConfirmationDialog: import_ConfirmationDialog.ConfirmationDialog,
    ContactModal: import_ContactModal.ContactModal,
    Emojify: import_Emojify.Emojify,
    MessageDetail: import_MessageDetail.MessageDetail,
    Quote: import_Quote.Quote,
    StagedLinkPreview: import_StagedLinkPreview.StagedLinkPreview,
    DisappearingTimeDialog: import_DisappearingTimeDialog.DisappearingTimeDialog,
    SystemTraySettingsCheckboxes: import_SystemTraySettingsCheckboxes.SystemTraySettingsCheckboxes
  };
  const Roots = {
    createApp: import_createApp.createApp,
    createChatColorPicker: import_createChatColorPicker.createChatColorPicker,
    createConversationDetails: import_createConversationDetails.createConversationDetails,
    createForwardMessageModal: import_createForwardMessageModal.createForwardMessageModal,
    createGroupLinkManagement: import_createGroupLinkManagement.createGroupLinkManagement,
    createGroupV1MigrationModal: import_createGroupV1MigrationModal.createGroupV1MigrationModal,
    createGroupV2JoinModal: import_createGroupV2JoinModal.createGroupV2JoinModal,
    createGroupV2Permissions: import_createGroupV2Permissions.createGroupV2Permissions,
    createMessageDetail: import_createMessageDetail.createMessageDetail,
    createConversationNotificationsSettings: import_createConversationNotificationsSettings.createConversationNotificationsSettings,
    createPendingInvites: import_createPendingInvites.createPendingInvites,
    createSafetyNumberViewer: import_createSafetyNumberViewer.createSafetyNumberViewer,
    createShortcutGuideModal: import_createShortcutGuideModal.createShortcutGuideModal,
    createStickerManager: import_createStickerManager.createStickerManager,
    createStickerPreviewModal: import_createStickerPreviewModal.createStickerPreviewModal
  };
  const Ducks = {
    app: appDuck,
    calling: callingDuck,
    conversations: conversationsDuck,
    emojis: emojisDuck,
    expiration: expirationDuck,
    items: itemsDuck,
    linkPreviews: linkPreviewsDuck,
    network: networkDuck,
    updates: updatesDuck,
    user: userDuck,
    search: searchDuck,
    stickers: stickersDuck
  };
  const Selectors = {
    conversations: conversationsSelectors,
    search: searchSelectors
  };
  const Services = {
    calling: import_calling.calling,
    enableStorageService: import_storage.enableStorageService,
    eraseAllStorageServiceState: import_storage.eraseAllStorageServiceState,
    initializeGroupCredentialFetcher: import_groupCredentialFetcher.initializeGroupCredentialFetcher,
    initializeNetworkObserver: import_networkObserver.initializeNetworkObserver,
    initializeUpdateListener: import_updateListener.initializeUpdateListener,
    runStorageServiceSyncJob: import_storage.runStorageServiceSyncJob,
    storageServiceUploadJob: import_storage.storageServiceUploadJob
  };
  const State = {
    createStore: import_createStore.createStore,
    Roots,
    Ducks,
    Selectors
  };
  const Types = {
    Message: MessageType,
    UUID: import_UUID.UUID,
    Address: import_Address.Address,
    QualifiedAddress: import_QualifiedAddress.QualifiedAddress
  };
  return {
    Components,
    Crypto,
    Curve,
    conversationControllerStart: import_ConversationController.start,
    Data: import_Client.default,
    Groups,
    Migrations,
    OS,
    RemoteConfig,
    Services,
    State,
    Types,
    Util
  };
}, "setup");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  initializeMigrations,
  setup
});
//# sourceMappingURL=data:application/json;base64,
