var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var globalModals_exports = {};
__export(globalModals_exports, {
  TOGGLE_PROFILE_EDITOR_ERROR: () => TOGGLE_PROFILE_EDITOR_ERROR,
  actions: () => actions,
  getEmptyState: () => getEmptyState,
  reducer: () => reducer
});
module.exports = __toCommonJS(globalModals_exports);
const HIDE_CONTACT_MODAL = "globalModals/HIDE_CONTACT_MODAL";
const SHOW_CONTACT_MODAL = "globalModals/SHOW_CONTACT_MODAL";
const SHOW_WHATS_NEW_MODAL = "globalModals/SHOW_WHATS_NEW_MODAL_MODAL";
const SHOW_UUID_NOT_FOUND_MODAL = "globalModals/SHOW_UUID_NOT_FOUND_MODAL";
const HIDE_UUID_NOT_FOUND_MODAL = "globalModals/HIDE_UUID_NOT_FOUND_MODAL";
const HIDE_WHATS_NEW_MODAL = "globalModals/HIDE_WHATS_NEW_MODAL_MODAL";
const TOGGLE_PROFILE_EDITOR = "globalModals/TOGGLE_PROFILE_EDITOR";
const TOGGLE_PROFILE_EDITOR_ERROR = "globalModals/TOGGLE_PROFILE_EDITOR_ERROR";
const TOGGLE_SAFETY_NUMBER_MODAL = "globalModals/TOGGLE_SAFETY_NUMBER_MODAL";
const actions = {
  hideContactModal,
  showContactModal,
  hideWhatsNewModal,
  showWhatsNewModal,
  hideUserNotFoundModal,
  showUserNotFoundModal,
  toggleProfileEditor,
  toggleProfileEditorHasError,
  toggleSafetyNumberModal
};
function hideContactModal() {
  return {
    type: HIDE_CONTACT_MODAL
  };
}
function showContactModal(contactId, conversationId) {
  return {
    type: SHOW_CONTACT_MODAL,
    payload: {
      contactId,
      conversationId
    }
  };
}
function hideWhatsNewModal() {
  return {
    type: HIDE_WHATS_NEW_MODAL
  };
}
function showWhatsNewModal() {
  return {
    type: SHOW_WHATS_NEW_MODAL
  };
}
function hideUserNotFoundModal() {
  return {
    type: HIDE_UUID_NOT_FOUND_MODAL
  };
}
function showUserNotFoundModal(payload) {
  return {
    type: SHOW_UUID_NOT_FOUND_MODAL,
    payload
  };
}
function toggleProfileEditor() {
  return { type: TOGGLE_PROFILE_EDITOR };
}
function toggleProfileEditorHasError() {
  return { type: TOGGLE_PROFILE_EDITOR_ERROR };
}
function toggleSafetyNumberModal(safetyNumberModalContactId) {
  return {
    type: TOGGLE_SAFETY_NUMBER_MODAL,
    payload: safetyNumberModalContactId
  };
}
function getEmptyState() {
  return {
    isProfileEditorVisible: false,
    profileEditorHasError: false,
    isWhatsNewVisible: false
  };
}
function reducer(state = getEmptyState(), action) {
  if (action.type === TOGGLE_PROFILE_EDITOR) {
    return {
      ...state,
      isProfileEditorVisible: !state.isProfileEditorVisible
    };
  }
  if (action.type === TOGGLE_PROFILE_EDITOR_ERROR) {
    return {
      ...state,
      profileEditorHasError: !state.profileEditorHasError
    };
  }
  if (action.type === SHOW_WHATS_NEW_MODAL) {
    return {
      ...state,
      isWhatsNewVisible: true
    };
  }
  if (action.type === HIDE_WHATS_NEW_MODAL) {
    return {
      ...state,
      isWhatsNewVisible: false
    };
  }
  if (action.type === HIDE_UUID_NOT_FOUND_MODAL) {
    return {
      ...state,
      userNotFoundModalState: void 0
    };
  }
  if (action.type === SHOW_UUID_NOT_FOUND_MODAL) {
    return {
      ...state,
      userNotFoundModalState: {
        ...action.payload
      }
    };
  }
  if (action.type === SHOW_CONTACT_MODAL) {
    return {
      ...state,
      contactModalState: action.payload
    };
  }
  if (action.type === HIDE_CONTACT_MODAL) {
    return {
      ...state,
      contactModalState: void 0
    };
  }
  if (action.type === TOGGLE_SAFETY_NUMBER_MODAL) {
    return {
      ...state,
      safetyNumberModalContactId: action.payload
    };
  }
  return state;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  TOGGLE_PROFILE_EDITOR_ERROR,
  actions,
  getEmptyState,
  reducer
});
//# sourceMappingURL=data:application/json;base64,
