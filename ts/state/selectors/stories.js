var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var stories_exports = {};
__export(stories_exports, {
  getStories: () => getStories,
  getStoriesSelector: () => getStoriesSelector,
  getStoriesState: () => getStoriesState,
  getStoryReplies: () => getStoryReplies,
  shouldShowStoriesView: () => shouldShowStoriesView
});
module.exports = __toCommonJS(stories_exports);
var import_reselect = require("reselect");
var import_lodash = require("lodash");
var import_MessageReadStatus = require("../../messages/MessageReadStatus");
var import_message = require("./message");
var import_conversations = require("./conversations");
var import_user = require("./user");
const getStoriesState = /* @__PURE__ */ __name((state) => state.stories, "getStoriesState");
const shouldShowStoriesView = (0, import_reselect.createSelector)(getStoriesState, ({ isShowingStoriesView }) => isShowingStoriesView);
function getNewestStory(x) {
  return x.stories[x.stories.length - 1];
}
function sortByRecencyAndUnread(a, b) {
  const storyA = getNewestStory(a);
  const storyB = getNewestStory(b);
  if (storyA.isUnread && storyB.isUnread) {
    return storyA.timestamp > storyB.timestamp ? -1 : 1;
  }
  if (storyB.isUnread) {
    return 1;
  }
  if (storyA.isUnread) {
    return -1;
  }
  return storyA.timestamp > storyB.timestamp ? -1 : 1;
}
function getReactionUniqueId(reaction) {
  return `${reaction.fromId}:${reaction.targetAuthorUuid}:${reaction.timestamp}`;
}
function getAvatarData(conversation) {
  return (0, import_lodash.pick)(conversation, [
    "acceptedMessageRequest",
    "avatarPath",
    "color",
    "isMe",
    "name",
    "profileName",
    "sharedGroupNames",
    "title"
  ]);
}
function getConversationStory(conversationSelector, story, ourConversationId) {
  const sender = (0, import_lodash.pick)(conversationSelector(story.sourceUuid || story.source), [
    "acceptedMessageRequest",
    "avatarPath",
    "color",
    "firstName",
    "hideStory",
    "id",
    "isMe",
    "name",
    "profileName",
    "sharedGroupNames",
    "title"
  ]);
  const conversation = (0, import_lodash.pick)(conversationSelector(story.conversationId), [
    "acceptedMessageRequest",
    "avatarPath",
    "color",
    "id",
    "name",
    "profileName",
    "sharedGroupNames",
    "title"
  ]);
  const { attachment, timestamp } = (0, import_lodash.pick)(story, ["attachment", "timestamp"]);
  const storyView = {
    attachment,
    canReply: (0, import_message.canReply)(story, ourConversationId, conversationSelector),
    isUnread: story.readStatus === import_MessageReadStatus.ReadStatus.Unread,
    messageId: story.messageId,
    sender,
    timestamp
  };
  return {
    conversationId: conversation.id,
    group: conversation.id !== sender.id ? conversation : void 0,
    isHidden: Boolean(sender.hideStory),
    stories: [storyView]
  };
}
const getStoriesSelector = (0, import_reselect.createSelector)(import_conversations.getConversationSelector, import_user.getUserConversationId, getStoriesState, (conversationSelector, ourConversationId, { stories }) => {
  return (conversationId) => {
    const conversationStoryAcc = {
      conversationId,
      stories: []
    };
    return stories.reduce((acc, story) => {
      if (story.conversationId !== conversationId) {
        return acc;
      }
      const conversationStory = getConversationStory(conversationSelector, story, ourConversationId);
      return {
        ...acc,
        ...conversationStory,
        stories: [...acc.stories, ...conversationStory.stories]
      };
    }, conversationStoryAcc);
  };
});
const getStoryReplies = (0, import_reselect.createSelector)(import_conversations.getConversationSelector, import_conversations.getContactNameColorSelector, import_conversations.getMe, getStoriesState, (conversationSelector, contactNameColorSelector, me, { stories, replyState }) => {
  if (!replyState) {
    return;
  }
  const foundStory = stories.find((story) => story.messageId === replyState.messageId);
  const reactions = foundStory ? (foundStory.reactions || []).map((reaction) => {
    const conversation = conversationSelector(reaction.fromId);
    return {
      ...getAvatarData(conversation),
      contactNameColor: contactNameColorSelector(foundStory.conversationId, conversation.id),
      id: getReactionUniqueId(reaction),
      reactionEmoji: reaction.emoji,
      timestamp: reaction.timestamp
    };
  }) : [];
  const replies = replyState.replies.map((reply) => {
    const conversation = reply.type === "outgoing" ? me : conversationSelector(reply.sourceUuid || reply.source);
    return {
      ...getAvatarData(conversation),
      ...(0, import_lodash.pick)(reply, ["body", "deletedForEveryone", "id", "timestamp"]),
      contactNameColor: contactNameColorSelector(reply.conversationId, conversation.id)
    };
  });
  const combined = [...replies, ...reactions].sort((a, b) => a.timestamp > b.timestamp ? 1 : -1);
  return {
    messageId: replyState.messageId,
    replies: combined
  };
});
const getStories = (0, import_reselect.createSelector)(import_conversations.getConversationSelector, import_user.getUserConversationId, getStoriesState, shouldShowStoriesView, (conversationSelector, ourConversationId, { stories }, isShowingStoriesView) => {
  if (!isShowingStoriesView) {
    return {
      hiddenStories: [],
      stories: []
    };
  }
  const storiesById = /* @__PURE__ */ new Map();
  const hiddenStoriesById = /* @__PURE__ */ new Map();
  stories.forEach((story) => {
    const conversationStory = getConversationStory(conversationSelector, story, ourConversationId);
    let storiesMap;
    if (conversationStory.isHidden) {
      storiesMap = hiddenStoriesById;
    } else {
      storiesMap = storiesById;
    }
    const existingConversationStory = storiesMap.get(conversationStory.conversationId) || { stories: [] };
    storiesMap.set(conversationStory.conversationId, {
      ...existingConversationStory,
      ...conversationStory,
      stories: [
        ...existingConversationStory.stories,
        ...conversationStory.stories
      ]
    });
  });
  return {
    hiddenStories: Array.from(hiddenStoriesById.values()).sort(sortByRecencyAndUnread),
    stories: Array.from(storiesById.values()).sort(sortByRecencyAndUnread)
  };
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getStories,
  getStoriesSelector,
  getStoriesState,
  getStoryReplies,
  shouldShowStoriesView
});
//# sourceMappingURL=data:application/json;base64,
