var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var getDefaultConversation_exports = {};
__export(getDefaultConversation_exports, {
  getAvatarPath: () => getAvatarPath,
  getDefaultConversation: () => getDefaultConversation,
  getDefaultConversationWithUuid: () => getDefaultConversationWithUuid,
  getFirstName: () => getFirstName,
  getLastName: () => getLastName
});
module.exports = __toCommonJS(getDefaultConversation_exports);
var import_uuid = require("uuid");
var import_lodash = require("lodash");
var import_UUID = require("../../types/UUID");
var import_getRandomColor = require("./getRandomColor");
var import_Colors = require("../../types/Colors");
const FIRST_NAMES = [
  "James",
  "John",
  "Robert",
  "Michael",
  "William",
  "David",
  "Richard",
  "Joseph",
  "Thomas",
  "Charles",
  "Christopher",
  "Daniel",
  "Matthew",
  "Anthony",
  "Donald",
  "Mark",
  "Paul",
  "Steven",
  "Andrew",
  "Kenneth",
  "Joshua",
  "Kevin",
  "Brian",
  "George",
  "Edward",
  "Ronald",
  "Timothy",
  "Jason",
  "Jeffrey",
  "Ryan",
  "Jacob",
  "Gary",
  "Nicholas",
  "Eric",
  "Jonathan",
  "Stephen",
  "Larry",
  "Justin",
  "Scott",
  "Brandon",
  "Benjamin",
  "Samuel",
  "Frank",
  "Gregory",
  "Raymond",
  "Alexander",
  "Patrick",
  "Jack",
  "Dennis",
  "Jerry",
  "Tyler",
  "Aaron",
  "Jose",
  "Henry",
  "Adam",
  "Douglas",
  "Nathan",
  "Peter",
  "Zachary",
  "Kyle",
  "Walter",
  "Harold",
  "Jeremy",
  "Ethan",
  "Carl",
  "Keith",
  "Roger",
  "Gerald",
  "Christian",
  "Terry",
  "Sean",
  "Arthur",
  "Austin",
  "Noah",
  "Lawrence",
  "Jesse",
  "Joe",
  "Bryan",
  "Billy",
  "Jordan",
  "Albert",
  "Dylan",
  "Bruce",
  "Willie",
  "Gabriel",
  "Alan",
  "Juan",
  "Logan",
  "Wayne",
  "Ralph",
  "Roy",
  "Eugene",
  "Randy",
  "Vincent",
  "Russell",
  "Louis",
  "Philip",
  "Bobby",
  "Johnny",
  "Bradley",
  "Mary",
  "Patricia",
  "Jennifer",
  "Linda",
  "Elizabeth",
  "Barbara",
  "Susan",
  "Jessica",
  "Sarah",
  "Karen",
  "Nancy",
  "Lisa",
  "Margaret",
  "Betty",
  "Sandra",
  "Ashley",
  "Dorothy",
  "Kimberly",
  "Emily",
  "Donna",
  "Michelle",
  "Carol",
  "Amanda",
  "Melissa",
  "Deborah",
  "Stephanie",
  "Rebecca",
  "Laura",
  "Sharon",
  "Cynthia",
  "Kathleen",
  "Amy",
  "Shirley",
  "Angela",
  "Helen",
  "Anna",
  "Brenda",
  "Pamela",
  "Nicole",
  "Samantha",
  "Katherine",
  "Emma",
  "Ruth",
  "Christine",
  "Catherine",
  "Debra",
  "Rachel",
  "Carolyn",
  "Janet",
  "Virginia",
  "Maria",
  "Heather",
  "Diane",
  "Julie",
  "Joyce",
  "Victoria",
  "Kelly",
  "Christina",
  "Lauren",
  "Joan",
  "Evelyn",
  "Olivia",
  "Judith",
  "Megan",
  "Cheryl",
  "Martha",
  "Andrea",
  "Frances",
  "Hannah",
  "Jacqueline",
  "Ann",
  "Gloria",
  "Jean",
  "Kathryn",
  "Alice",
  "Teresa",
  "Sara",
  "Janice",
  "Doris",
  "Madison",
  "Julia",
  "Grace",
  "Judy",
  "Abigail",
  "Marie",
  "Denise",
  "Beverly",
  "Amber",
  "Theresa",
  "Marilyn",
  "Danielle",
  "Diana",
  "Brittany",
  "Natalie",
  "Sophia",
  "Rose",
  "Isabella",
  "Alexis",
  "Kayla",
  "Charlotte"
];
const LAST_NAMES = [
  "Smith",
  "Johnson",
  "Williams",
  "Brown",
  "Jones",
  "Garcia",
  "Miller",
  "Davis",
  "Rodriguez",
  "Martinez",
  "Hernandez",
  "Lopez",
  "Gonzales",
  "Wilson",
  "Anderson",
  "Thomas",
  "Taylor",
  "Moore",
  "Jackson",
  "Martin",
  "Lee",
  "Perez",
  "Thompson",
  "White",
  "Harris",
  "Sanchez",
  "Clark",
  "Ramirez",
  "Lewis",
  "Robinson",
  "Walker",
  "Young",
  "Allen",
  "King",
  "Wright",
  "Scott",
  "Torres",
  "Nguyen",
  "Hill",
  "Flores",
  "Green",
  "Adams",
  "Nelson",
  "Baker",
  "Hall",
  "Rivera",
  "Campbell",
  "Mitchell",
  "Carter",
  "Roberts",
  "Gomez",
  "Phillips",
  "Evans",
  "Turner",
  "Diaz",
  "Parker",
  "Cruz",
  "Edwards",
  "Collins",
  "Reyes",
  "Stewart",
  "Morris",
  "Morales",
  "Murphy",
  "Cook",
  "Rogers",
  "Gutierrez",
  "Ortiz",
  "Morgan",
  "Cooper",
  "Peterson",
  "Bailey",
  "Reed",
  "Kelly",
  "Howard",
  "Ramos",
  "Kim",
  "Cox",
  "Ward",
  "Richardson",
  "Watson",
  "Brooks",
  "Chavez",
  "Wood",
  "James",
  "Bennet",
  "Gray",
  "Mendoza",
  "Ruiz",
  "Hughes",
  "Price",
  "Alvarez",
  "Castillo",
  "Sanders",
  "Patel",
  "Myers",
  "Long",
  "Ross",
  "Foster",
  "Jimenez"
];
const getFirstName = /* @__PURE__ */ __name(() => (0, import_lodash.sample)(FIRST_NAMES) || "Test", "getFirstName");
const getLastName = /* @__PURE__ */ __name(() => (0, import_lodash.sample)(LAST_NAMES) || "Test", "getLastName");
const getAvatarPath = /* @__PURE__ */ __name(() => (0, import_lodash.sample)([
  "/fixtures/kitten-1-64-64.jpg",
  "/fixtures/kitten-2-64-64.jpg",
  "/fixtures/kitten-3-64-64.jpg"
]) || "", "getAvatarPath");
function getDefaultConversation(overrideProps = {}) {
  const firstName = getFirstName();
  const lastName = getLastName();
  return {
    acceptedMessageRequest: true,
    avatarPath: getAvatarPath(),
    badges: [],
    e164: "+8615000000000",
    conversationColor: import_Colors.ConversationColors[0],
    color: (0, import_getRandomColor.getRandomColor)(),
    firstName,
    id: (0, import_uuid.v4)(),
    isMe: false,
    lastUpdated: Date.now(),
    markedUnread: Boolean(overrideProps.markedUnread),
    sharedGroupNames: [],
    title: `${firstName} ${lastName}`,
    type: "direct",
    uuid: import_UUID.UUID.generate().toString(),
    ...overrideProps
  };
}
function getDefaultConversationWithUuid(overrideProps = {}, uuid = import_UUID.UUID.generate().toString()) {
  return {
    ...getDefaultConversation(overrideProps),
    uuid
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getAvatarPath,
  getDefaultConversation,
  getDefaultConversationWithUuid,
  getFirstName,
  getLastName
});
//# sourceMappingURL=data:application/json;base64,
