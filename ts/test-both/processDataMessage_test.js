var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var import_chai = require("chai");
var import_long = __toESM(require("long"));
var import_processDataMessage = require("../textsecure/processDataMessage");
var import_protobuf = require("../protobuf");
var import_MIME = require("../types/MIME");
const FLAGS = import_protobuf.SignalService.DataMessage.Flags;
const TIMESTAMP = Date.now();
const UNPROCESSED_ATTACHMENT = {
  cdnId: import_long.default.fromNumber(123),
  key: new Uint8Array([1, 2, 3]),
  digest: new Uint8Array([4, 5, 6]),
  contentType: import_MIME.IMAGE_GIF,
  size: 34
};
const PROCESSED_ATTACHMENT = {
  cdnId: "123",
  key: "AQID",
  digest: "BAUG",
  contentType: import_MIME.IMAGE_GIF,
  size: 34
};
const GROUP_ID = new Uint8Array([104, 101, 121]);
const DERIVED_GROUPV2_ID = "7qQUi8Wa6Jm3Rl+l63saATGeciEqokbHpP+lV3F5t9o=";
describe("processDataMessage", () => {
  const check = /* @__PURE__ */ __name((message) => (0, import_processDataMessage.processDataMessage)({
    timestamp: import_long.default.fromNumber(TIMESTAMP),
    ...message
  }, TIMESTAMP), "check");
  it("should process attachments", async () => {
    const out = await check({
      attachments: [UNPROCESSED_ATTACHMENT]
    });
    import_chai.assert.deepStrictEqual(out.attachments, [PROCESSED_ATTACHMENT]);
  });
  it("should process attachments with 0 cdnId", async () => {
    const out = await check({
      attachments: [
        {
          ...UNPROCESSED_ATTACHMENT,
          cdnId: new import_long.default(0)
        }
      ]
    });
    import_chai.assert.deepStrictEqual(out.attachments, [
      {
        ...PROCESSED_ATTACHMENT,
        cdnId: void 0
      }
    ]);
  });
  it("should throw on too many attachments", async () => {
    const attachments = [];
    for (let i = 0; i < import_processDataMessage.ATTACHMENT_MAX + 1; i += 1) {
      attachments.push(UNPROCESSED_ATTACHMENT);
    }
    await import_chai.assert.isRejected(check({ attachments }), `Too many attachments: ${import_processDataMessage.ATTACHMENT_MAX + 1} included in one message, max is ${import_processDataMessage.ATTACHMENT_MAX}`);
  });
  it("should process group context UPDATE/QUIT message", async () => {
    const { UPDATE, QUIT } = import_protobuf.SignalService.GroupContext.Type;
    for (const type of [UPDATE, QUIT]) {
      const out = await check({
        body: "should be deleted",
        attachments: [UNPROCESSED_ATTACHMENT],
        group: {
          id: GROUP_ID,
          name: "Group",
          avatar: UNPROCESSED_ATTACHMENT,
          type,
          membersE164: ["+1"]
        }
      });
      import_chai.assert.isUndefined(out.body);
      import_chai.assert.strictEqual(out.attachments.length, 0);
      import_chai.assert.deepStrictEqual(out.group, {
        id: "hey",
        name: "Group",
        avatar: PROCESSED_ATTACHMENT,
        type,
        membersE164: ["+1"],
        derivedGroupV2Id: DERIVED_GROUPV2_ID
      });
    }
  });
  it("should process group context DELIVER message", async () => {
    const out = await check({
      body: "should not be deleted",
      attachments: [UNPROCESSED_ATTACHMENT],
      group: {
        id: GROUP_ID,
        name: "should be deleted",
        membersE164: ["should be deleted"],
        type: import_protobuf.SignalService.GroupContext.Type.DELIVER
      }
    });
    import_chai.assert.strictEqual(out.body, "should not be deleted");
    import_chai.assert.strictEqual(out.attachments.length, 1);
    import_chai.assert.deepStrictEqual(out.group, {
      id: "hey",
      type: import_protobuf.SignalService.GroupContext.Type.DELIVER,
      membersE164: [],
      derivedGroupV2Id: DERIVED_GROUPV2_ID,
      avatar: void 0,
      name: void 0
    });
  });
  it("should process groupv2 context", async () => {
    const out = await check({
      groupV2: {
        masterKey: new Uint8Array(32),
        revision: 1,
        groupChange: new Uint8Array([4, 5, 6])
      }
    });
    import_chai.assert.deepStrictEqual(out.groupV2, {
      masterKey: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
      revision: 1,
      groupChange: "BAUG",
      id: "d/rq8//fR4RzhvN3G9KcKlQoj7cguQFjTOqLV6JUSbo=",
      secretParams: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAd/rq8//fR4RzhvN3G9KcKlQoj7cguQFjTOqLV6JUSbrURzeILsUmsymGJmHt3kpBJ2zosqp4exsg+qwF1z6YdB/rxKnxKRLZZP/V0F7bERslYILy2lUh3Sh3iA98yO4CGfzjjFVo1SI7U8XApLeVNQHJo7nkflf/JyBrqPft5gEucbKW/h+S3OYjfQ5zl2Cpw3XrV7N6OKEutLUWPHQuJx11A4xDPrmtAOnGy2NBxoOybDNlWipeNbn1WQJqOjMF7YA80oEm+5qnMkEYcFVqbYaSzPcMhg3mQ0SYfQpxYgSOJpwp9f/8EDnwJV4ISPBOo2CiaSqVfnd8DwZOc58gQA==",
      publicParams: "AHf66vP/30eEc4bzdxvSnCpUKI+3ILkBY0zqi1eiVEm6LnGylv4fktzmI30Oc5dgqcN161ezejihLrS1Fjx0LieOJpwp9f/8EDnwJV4ISPBOo2CiaSqVfnd8DwZOc58gQA=="
    });
  });
  it("should base64 profileKey", async () => {
    const out = await check({
      profileKey: new Uint8Array([42, 23, 55])
    });
    import_chai.assert.strictEqual(out.profileKey, "Khc3");
  });
  it("should process quote", async () => {
    const out = await check({
      quote: {
        id: import_long.default.fromNumber(1),
        authorUuid: "author",
        text: "text",
        attachments: [
          {
            contentType: "image/jpeg",
            fileName: "image.jpg",
            thumbnail: UNPROCESSED_ATTACHMENT
          }
        ]
      }
    });
    import_chai.assert.deepStrictEqual(out.quote, {
      id: 1,
      authorUuid: "author",
      text: "text",
      attachments: [
        {
          contentType: "image/jpeg",
          fileName: "image.jpg",
          thumbnail: PROCESSED_ATTACHMENT
        }
      ],
      bodyRanges: [],
      type: 0
    });
  });
  it("should process contact", async () => {
    const out = await check({
      contact: [
        {
          avatar: {
            avatar: UNPROCESSED_ATTACHMENT
          }
        },
        {
          avatar: {
            avatar: UNPROCESSED_ATTACHMENT,
            isProfile: true
          }
        }
      ]
    });
    import_chai.assert.deepStrictEqual(out.contact, [
      {
        avatar: { avatar: PROCESSED_ATTACHMENT, isProfile: false }
      },
      {
        avatar: { avatar: PROCESSED_ATTACHMENT, isProfile: true }
      }
    ]);
  });
  it("should process reaction", async () => {
    import_chai.assert.deepStrictEqual((await check({
      reaction: {
        emoji: "\u{1F60E}",
        targetTimestamp: import_long.default.fromNumber(TIMESTAMP)
      }
    })).reaction, {
      emoji: "\u{1F60E}",
      remove: false,
      targetAuthorUuid: void 0,
      targetTimestamp: TIMESTAMP
    });
    import_chai.assert.deepStrictEqual((await check({
      reaction: {
        emoji: "\u{1F60E}",
        remove: true,
        targetTimestamp: import_long.default.fromNumber(TIMESTAMP)
      }
    })).reaction, {
      emoji: "\u{1F60E}",
      remove: true,
      targetAuthorUuid: void 0,
      targetTimestamp: TIMESTAMP
    });
  });
  it("should process preview", async () => {
    const out = await check({
      preview: [
        {
          date: import_long.default.fromNumber(TIMESTAMP),
          image: UNPROCESSED_ATTACHMENT
        }
      ]
    });
    import_chai.assert.deepStrictEqual(out.preview, [
      {
        date: TIMESTAMP,
        description: void 0,
        title: void 0,
        url: void 0,
        image: PROCESSED_ATTACHMENT
      }
    ]);
  });
  it("should process sticker", async () => {
    const out = await check({
      sticker: {
        packId: new Uint8Array([1, 2, 3]),
        packKey: new Uint8Array([4, 5, 6]),
        stickerId: 1,
        data: UNPROCESSED_ATTACHMENT
      }
    });
    import_chai.assert.deepStrictEqual(out.sticker, {
      packId: "010203",
      packKey: "BAUG",
      stickerId: 1,
      data: PROCESSED_ATTACHMENT
    });
  });
  it("should process FLAGS=END_SESSION", async () => {
    const out = await check({
      flags: FLAGS.END_SESSION,
      body: "should be deleted",
      group: {
        id: GROUP_ID,
        type: import_protobuf.SignalService.GroupContext.Type.DELIVER
      },
      attachments: [UNPROCESSED_ATTACHMENT]
    });
    import_chai.assert.isUndefined(out.body);
    import_chai.assert.isUndefined(out.group);
    import_chai.assert.deepStrictEqual(out.attachments, []);
  });
  it("should process FLAGS=EXPIRATION_TIMER_UPDATE,PROFILE_KEY_UPDATE", async () => {
    const values = [FLAGS.EXPIRATION_TIMER_UPDATE, FLAGS.PROFILE_KEY_UPDATE];
    for (const flags of values) {
      const out = await check({
        flags,
        body: "should be deleted",
        attachments: [UNPROCESSED_ATTACHMENT]
      });
      import_chai.assert.isUndefined(out.body);
      import_chai.assert.deepStrictEqual(out.attachments, []);
    }
  });
  it("processes trivial fields", async () => {
    import_chai.assert.strictEqual((await check({ flags: null })).flags, 0);
    import_chai.assert.strictEqual((await check({ flags: 1 })).flags, 1);
    import_chai.assert.strictEqual((await check({ expireTimer: null })).expireTimer, 0);
    import_chai.assert.strictEqual((await check({ expireTimer: 123 })).expireTimer, 123);
    import_chai.assert.isFalse((await check({ isViewOnce: null })).isViewOnce);
    import_chai.assert.isFalse((await check({ isViewOnce: false })).isViewOnce);
    import_chai.assert.isTrue((await check({ isViewOnce: true })).isViewOnce);
  });
});
//# sourceMappingURL=data:application/json;base64,
