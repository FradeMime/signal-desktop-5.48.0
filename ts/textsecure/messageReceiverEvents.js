var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var messageReceiverEvents_exports = {};
__export(messageReceiverEvents_exports, {
  ConfigurationEvent: () => ConfigurationEvent,
  ConfirmableEvent: () => ConfirmableEvent,
  ContactEvent: () => ContactEvent,
  ContactSyncEvent: () => ContactSyncEvent,
  DecryptionErrorEvent: () => DecryptionErrorEvent,
  DeliveryEvent: () => DeliveryEvent,
  EmptyEvent: () => EmptyEvent,
  EnvelopeEvent: () => EnvelopeEvent,
  ErrorEvent: () => ErrorEvent,
  FetchLatestEvent: () => FetchLatestEvent,
  GroupEvent: () => GroupEvent,
  GroupSyncEvent: () => GroupSyncEvent,
  KeysEvent: () => KeysEvent,
  MessageEvent: () => MessageEvent,
  MessageRequestResponseEvent: () => MessageRequestResponseEvent,
  PNIIdentityEvent: () => PNIIdentityEvent,
  ProfileKeyUpdateEvent: () => ProfileKeyUpdateEvent,
  ProgressEvent: () => ProgressEvent,
  ReadEvent: () => ReadEvent,
  ReadSyncEvent: () => ReadSyncEvent,
  RetryRequestEvent: () => RetryRequestEvent,
  SentEvent: () => SentEvent,
  StickerPackEvent: () => StickerPackEvent,
  TypingEvent: () => TypingEvent,
  ViewEvent: () => ViewEvent,
  ViewOnceOpenSyncEvent: () => ViewOnceOpenSyncEvent,
  ViewSyncEvent: () => ViewSyncEvent
});
module.exports = __toCommonJS(messageReceiverEvents_exports);
class EmptyEvent extends Event {
  constructor() {
    super("empty");
  }
}
class ProgressEvent extends Event {
  constructor({ count }) {
    super("progress");
    this.count = count;
  }
}
class TypingEvent extends Event {
  constructor({ sender, senderUuid, senderDevice, typing }) {
    super("typing");
    this.sender = sender;
    this.senderUuid = senderUuid;
    this.senderDevice = senderDevice;
    this.typing = typing;
  }
}
class ErrorEvent extends Event {
  constructor(error) {
    super("error");
    this.error = error;
  }
}
class ContactEvent extends Event {
  constructor(contactDetails, receivedAtCounter) {
    super("contact");
    this.contactDetails = contactDetails;
    this.receivedAtCounter = receivedAtCounter;
  }
}
class ContactSyncEvent extends Event {
  constructor() {
    super("contactSync");
  }
}
class GroupEvent extends Event {
  constructor(groupDetails, receivedAtCounter) {
    super("group");
    this.groupDetails = groupDetails;
    this.receivedAtCounter = receivedAtCounter;
  }
}
class GroupSyncEvent extends Event {
  constructor() {
    super("groupSync");
  }
}
class EnvelopeEvent extends Event {
  constructor(envelope) {
    super("envelope");
    this.envelope = envelope;
  }
}
class ConfirmableEvent extends Event {
  constructor(type, confirm) {
    super(type);
    this.confirm = confirm;
  }
}
class DeliveryEvent extends ConfirmableEvent {
  constructor(deliveryReceipt, confirm) {
    super("delivery", confirm);
    this.deliveryReceipt = deliveryReceipt;
  }
}
class DecryptionErrorEvent extends ConfirmableEvent {
  constructor(decryptionError, confirm) {
    super("decryption-error", confirm);
    this.decryptionError = decryptionError;
  }
}
class RetryRequestEvent extends ConfirmableEvent {
  constructor(retryRequest, confirm) {
    super("retry-request", confirm);
    this.retryRequest = retryRequest;
  }
}
class SentEvent extends ConfirmableEvent {
  constructor(data, confirm) {
    super("sent", confirm);
    this.data = data;
  }
}
class ProfileKeyUpdateEvent extends ConfirmableEvent {
  constructor(data, confirm) {
    super("profileKeyUpdate", confirm);
    this.data = data;
  }
}
class MessageEvent extends ConfirmableEvent {
  constructor(data, confirm) {
    super("message", confirm);
    this.data = data;
  }
}
class ReadEvent extends ConfirmableEvent {
  constructor(receipt, confirm) {
    super("read", confirm);
    this.receipt = receipt;
  }
}
class ViewEvent extends ConfirmableEvent {
  constructor(receipt, confirm) {
    super("view", confirm);
    this.receipt = receipt;
  }
}
class ConfigurationEvent extends ConfirmableEvent {
  constructor(configuration, confirm) {
    super("configuration", confirm);
    this.configuration = configuration;
  }
}
class ViewOnceOpenSyncEvent extends ConfirmableEvent {
  constructor({ source, sourceUuid, timestamp }, confirm) {
    super("viewOnceOpenSync", confirm);
    this.source = source;
    this.sourceUuid = sourceUuid;
    this.timestamp = timestamp;
  }
}
class MessageRequestResponseEvent extends ConfirmableEvent {
  constructor({
    threadE164,
    threadUuid,
    messageRequestResponseType,
    groupId,
    groupV2Id
  }, confirm) {
    super("messageRequestResponse", confirm);
    this.threadE164 = threadE164;
    this.threadUuid = threadUuid;
    this.messageRequestResponseType = messageRequestResponseType;
    this.groupId = groupId;
    this.groupV2Id = groupV2Id;
  }
}
class FetchLatestEvent extends ConfirmableEvent {
  constructor(eventType, confirm) {
    super("fetchLatest", confirm);
    this.eventType = eventType;
  }
}
class KeysEvent extends ConfirmableEvent {
  constructor(storageServiceKey, confirm) {
    super("keys", confirm);
    this.storageServiceKey = storageServiceKey;
  }
}
class PNIIdentityEvent extends ConfirmableEvent {
  constructor(data, confirm) {
    super("pniIdentity", confirm);
    this.data = data;
  }
}
class StickerPackEvent extends ConfirmableEvent {
  constructor(stickerPacks, confirm) {
    super("sticker-pack", confirm);
    this.stickerPacks = stickerPacks;
  }
}
class ReadSyncEvent extends ConfirmableEvent {
  constructor(read, confirm) {
    super("readSync", confirm);
    this.read = read;
  }
}
class ViewSyncEvent extends ConfirmableEvent {
  constructor(view, confirm) {
    super("viewSync", confirm);
    this.view = view;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ConfigurationEvent,
  ConfirmableEvent,
  ContactEvent,
  ContactSyncEvent,
  DecryptionErrorEvent,
  DeliveryEvent,
  EmptyEvent,
  EnvelopeEvent,
  ErrorEvent,
  FetchLatestEvent,
  GroupEvent,
  GroupSyncEvent,
  KeysEvent,
  MessageEvent,
  MessageRequestResponseEvent,
  PNIIdentityEvent,
  ProfileKeyUpdateEvent,
  ProgressEvent,
  ReadEvent,
  ReadSyncEvent,
  RetryRequestEvent,
  SentEvent,
  StickerPackEvent,
  TypingEvent,
  ViewEvent,
  ViewOnceOpenSyncEvent,
  ViewSyncEvent
});
//# sourceMappingURL=data:application/json;base64,
