var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var processDataMessage_exports = {};
__export(processDataMessage_exports, {
  ATTACHMENT_MAX: () => ATTACHMENT_MAX,
  processAttachment: () => processAttachment,
  processContact: () => processContact,
  processDataMessage: () => processDataMessage,
  processDelete: () => processDelete,
  processGiftBadge: () => processGiftBadge,
  processGroupV2Context: () => processGroupV2Context,
  processPreview: () => processPreview,
  processQuote: () => processQuote,
  processReaction: () => processReaction,
  processSticker: () => processSticker
});
module.exports = __toCommonJS(processDataMessage_exports);
var import_long = __toESM(require("long"));
var import_zkgroup = require("@signalapp/libsignal-client/zkgroup");
var import_assert = require("../util/assert");
var import_dropNull = require("../util/dropNull");
var import_protobuf = require("../protobuf");
var import_groups = require("../groups");
var Bytes = __toESM(require("../Bytes"));
var import_Crypto = require("../Crypto");
var import_Errors = require("./Errors");
var import_Message = require("../components/conversation/Message");
var import_MIME = require("../types/MIME");
var import_durations = require("../util/durations");
const FLAGS = import_protobuf.SignalService.DataMessage.Flags;
const ATTACHMENT_MAX = 32;
function processAttachment(attachment) {
  if (!attachment) {
    return void 0;
  }
  const { cdnId } = attachment;
  const hasCdnId = import_long.default.isLong(cdnId) ? !cdnId.isZero() : Boolean(cdnId);
  const { contentType, digest, key, size } = attachment;
  if (!size) {
    throw new Error("Missing size on incoming attachment!");
  }
  return {
    ...(0, import_dropNull.shallowDropNull)(attachment),
    cdnId: hasCdnId ? String(cdnId) : void 0,
    contentType: contentType ? (0, import_MIME.stringToMIMEType)(contentType) : import_MIME.APPLICATION_OCTET_STREAM,
    digest: digest ? Bytes.toBase64(digest) : void 0,
    key: key ? Bytes.toBase64(key) : void 0,
    size
  };
}
function processGroupContext(group) {
  if (!group) {
    return void 0;
  }
  (0, import_assert.strictAssert)(group.id, "group context without id");
  (0, import_assert.strictAssert)(group.type !== void 0 && group.type !== null, "group context without type");
  const masterKey = (0, import_Crypto.deriveMasterKeyFromGroupV1)(group.id);
  const data = (0, import_groups.deriveGroupFields)(masterKey);
  const derivedGroupV2Id = Bytes.toBase64(data.id);
  const result = {
    id: Bytes.toBinary(group.id),
    type: group.type,
    name: (0, import_dropNull.dropNull)(group.name),
    membersE164: group.membersE164 ?? [],
    avatar: processAttachment(group.avatar),
    derivedGroupV2Id
  };
  if (result.type === import_protobuf.SignalService.GroupContext.Type.DELIVER) {
    result.name = void 0;
    result.membersE164 = [];
    result.avatar = void 0;
  }
  return result;
}
function processGroupV2Context(groupV2) {
  if (!groupV2) {
    return void 0;
  }
  (0, import_assert.strictAssert)(groupV2.masterKey, "groupV2 context without masterKey");
  const data = (0, import_groups.deriveGroupFields)(groupV2.masterKey);
  return {
    masterKey: Bytes.toBase64(groupV2.masterKey),
    revision: (0, import_dropNull.dropNull)(groupV2.revision),
    groupChange: groupV2.groupChange ? Bytes.toBase64(groupV2.groupChange) : void 0,
    id: Bytes.toBase64(data.id),
    secretParams: Bytes.toBase64(data.secretParams),
    publicParams: Bytes.toBase64(data.publicParams)
  };
}
function processQuote(quote) {
  if (!quote) {
    return void 0;
  }
  return {
    id: quote.id?.toNumber(),
    authorUuid: (0, import_dropNull.dropNull)(quote.authorUuid),
    text: (0, import_dropNull.dropNull)(quote.text),
    attachments: (quote.attachments ?? []).map((attachment) => {
      return {
        contentType: (0, import_dropNull.dropNull)(attachment.contentType),
        fileName: (0, import_dropNull.dropNull)(attachment.fileName),
        thumbnail: processAttachment(attachment.thumbnail)
      };
    }),
    bodyRanges: quote.bodyRanges ?? [],
    type: quote.type || import_protobuf.SignalService.DataMessage.Quote.Type.NORMAL
  };
}
function processContact(contact) {
  if (!contact) {
    return void 0;
  }
  return contact.map((item) => {
    return {
      ...item,
      avatar: item.avatar ? {
        avatar: processAttachment(item.avatar.avatar),
        isProfile: Boolean(item.avatar.isProfile)
      } : void 0
    };
  });
}
function isLinkPreviewDateValid(value) {
  return typeof value === "number" && !Number.isNaN(value) && Number.isFinite(value) && value > 0;
}
function cleanLinkPreviewDate(value) {
  const result = value?.toNumber();
  return isLinkPreviewDateValid(result) ? result : void 0;
}
function processPreview(preview) {
  if (!preview) {
    return void 0;
  }
  return preview.map((item) => {
    return {
      url: (0, import_dropNull.dropNull)(item.url),
      title: (0, import_dropNull.dropNull)(item.title),
      image: item.image ? processAttachment(item.image) : void 0,
      description: (0, import_dropNull.dropNull)(item.description),
      date: cleanLinkPreviewDate(item.date)
    };
  });
}
function processSticker(sticker) {
  if (!sticker) {
    return void 0;
  }
  return {
    packId: sticker.packId ? Bytes.toHex(sticker.packId) : void 0,
    packKey: sticker.packKey ? Bytes.toBase64(sticker.packKey) : void 0,
    stickerId: (0, import_dropNull.dropNull)(sticker.stickerId),
    data: processAttachment(sticker.data)
  };
}
function processReaction(reaction) {
  if (!reaction) {
    return void 0;
  }
  return {
    emoji: (0, import_dropNull.dropNull)(reaction.emoji),
    remove: Boolean(reaction.remove),
    targetAuthorUuid: (0, import_dropNull.dropNull)(reaction.targetAuthorUuid),
    targetTimestamp: reaction.targetTimestamp?.toNumber()
  };
}
function processDelete(del) {
  if (!del) {
    return void 0;
  }
  return {
    targetSentTimestamp: del.targetSentTimestamp?.toNumber()
  };
}
function processGiftBadge(giftBadge) {
  if (!giftBadge || !giftBadge.receiptCredentialPresentation || giftBadge.receiptCredentialPresentation.length === 0) {
    return void 0;
  }
  const receipt = new import_zkgroup.ReceiptCredentialPresentation(Buffer.from(giftBadge.receiptCredentialPresentation));
  return {
    expiration: Number(receipt.getReceiptExpirationTime()) * import_durations.SECOND,
    id: void 0,
    level: Number(receipt.getReceiptLevel()),
    receiptCredentialPresentation: Bytes.toBase64(giftBadge.receiptCredentialPresentation),
    state: import_Message.GiftBadgeStates.Unopened
  };
}
async function processDataMessage(message, envelopeTimestamp) {
  if (!message.timestamp) {
    throw new Error("Missing timestamp on dataMessage");
  }
  const timestamp = message.timestamp?.toNumber();
  if (envelopeTimestamp !== timestamp) {
    throw new Error(`Timestamp ${timestamp} in DataMessage did not match envelope timestamp ${envelopeTimestamp}`);
  }
  const result = {
    body: (0, import_dropNull.dropNull)(message.body),
    attachments: (message.attachments ?? []).map((attachment) => processAttachment(attachment)),
    group: processGroupContext(message.group),
    groupV2: processGroupV2Context(message.groupV2),
    flags: message.flags ?? 0,
    expireTimer: message.expireTimer ?? 0,
    profileKey: message.profileKey && message.profileKey.length > 0 ? Bytes.toBase64(message.profileKey) : void 0,
    timestamp,
    quote: processQuote(message.quote),
    contact: processContact(message.contact),
    preview: processPreview(message.preview),
    sticker: processSticker(message.sticker),
    requiredProtocolVersion: (0, import_dropNull.dropNull)(message.requiredProtocolVersion),
    isViewOnce: Boolean(message.isViewOnce),
    reaction: processReaction(message.reaction),
    delete: processDelete(message.delete),
    bodyRanges: message.bodyRanges ?? [],
    groupCallUpdate: (0, import_dropNull.dropNull)(message.groupCallUpdate),
    storyContext: (0, import_dropNull.dropNull)(message.storyContext),
    giftBadge: processGiftBadge(message.giftBadge)
  };
  const isEndSession = Boolean(result.flags & FLAGS.END_SESSION);
  const isExpirationTimerUpdate = Boolean(result.flags & FLAGS.EXPIRATION_TIMER_UPDATE);
  const isProfileKeyUpdate = Boolean(result.flags & FLAGS.PROFILE_KEY_UPDATE);
  const flagCount = [
    isEndSession,
    isExpirationTimerUpdate,
    isProfileKeyUpdate
  ].filter(Boolean).length;
  (0, import_assert.assert)(flagCount <= 1, `Expected exactly <=1 flags to be set, but got ${flagCount}`);
  if (isEndSession) {
    result.body = void 0;
    result.attachments = [];
    result.group = void 0;
    return result;
  }
  if (isExpirationTimerUpdate) {
    result.body = void 0;
    result.attachments = [];
  } else if (isProfileKeyUpdate) {
    result.body = void 0;
    result.attachments = [];
  } else if (result.flags !== 0) {
    throw new Error(`Unknown flags in message: ${result.flags}`);
  }
  if (result.group) {
    switch (result.group.type) {
      case import_protobuf.SignalService.GroupContext.Type.UPDATE:
        result.body = void 0;
        result.attachments = [];
        break;
      case import_protobuf.SignalService.GroupContext.Type.QUIT:
        result.body = void 0;
        result.attachments = [];
        break;
      case import_protobuf.SignalService.GroupContext.Type.DELIVER:
        break;
      default: {
        throw new import_Errors.WarnOnlyError(`Unknown group message type: ${result.group.type}`);
      }
    }
  }
  const attachmentCount = result.attachments.length;
  if (attachmentCount > ATTACHMENT_MAX) {
    throw new Error(`Too many attachments: ${attachmentCount} included in one message, max is ${ATTACHMENT_MAX}`);
  }
  return result;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ATTACHMENT_MAX,
  processAttachment,
  processContact,
  processDataMessage,
  processDelete,
  processGiftBadge,
  processGroupV2Context,
  processPreview,
  processQuote,
  processReaction,
  processSticker
});
//# sourceMappingURL=data:application/json;base64,
