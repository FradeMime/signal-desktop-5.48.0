var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Message_exports = {};
__export(Message_exports, {
  hasExpiration: () => hasExpiration,
  isUserMessage: () => isUserMessage
});
module.exports = __toCommonJS(Message_exports);
const isUserMessage = /* @__PURE__ */ __name((message) => message.type === "incoming" || message.type === "outgoing", "isUserMessage");
const hasExpiration = /* @__PURE__ */ __name((message) => {
  if (!isUserMessage(message)) {
    return false;
  }
  const { expireTimer } = message;
  return typeof expireTimer === "number" && expireTimer > 0;
}, "hasExpiration");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  hasExpiration,
  isUserMessage
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiTWVzc2FnZS50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMiBTaWduYWwgTWVzc2VuZ2VyLCBMTENcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBR1BMLTMuMC1vbmx5XG5cbi8qIGVzbGludC1kaXNhYmxlIGNhbWVsY2FzZSAqL1xuXG5pbXBvcnQgdHlwZSB7IEF0dGFjaG1lbnRUeXBlIH0gZnJvbSAnLi9BdHRhY2htZW50JztcbmltcG9ydCB0eXBlIHsgRW1iZWRkZWRDb250YWN0VHlwZSB9IGZyb20gJy4vRW1iZWRkZWRDb250YWN0JztcbmltcG9ydCB0eXBlIHsgSW5kZXhhYmxlQm9vbGVhbiwgSW5kZXhhYmxlUHJlc2VuY2UgfSBmcm9tICcuL0luZGV4ZWREQic7XG5cbmV4cG9ydCB0eXBlIE1lc3NhZ2UgPSAoXG4gIHwgVXNlck1lc3NhZ2VcbiAgfCBWZXJpZmllZENoYW5nZU1lc3NhZ2VcbiAgfCBQcm9maWxlQ2hhbmdlTm90aWZpY2F0aW9uTWVzc2FnZVxuKSAmIHsgZGVsZXRlZEZvckV2ZXJ5b25lPzogYm9vbGVhbiB9O1xuZXhwb3J0IHR5cGUgVXNlck1lc3NhZ2UgPSBJbmNvbWluZ01lc3NhZ2UgfCBPdXRnb2luZ01lc3NhZ2U7XG5cbmV4cG9ydCB0eXBlIEluY29taW5nTWVzc2FnZSA9IFJlYWRvbmx5PFxuICB7XG4gICAgdHlwZTogJ2luY29taW5nJztcbiAgICAvLyBSZXF1aXJlZFxuICAgIGF0dGFjaG1lbnRzOiBBcnJheTxBdHRhY2htZW50VHlwZT47XG4gICAgaWQ6IHN0cmluZztcbiAgICByZWNlaXZlZF9hdDogbnVtYmVyO1xuXG4gICAgLy8gT3B0aW9uYWxcbiAgICBib2R5Pzogc3RyaW5nO1xuICAgIGRlY3J5cHRlZF9hdD86IG51bWJlcjtcbiAgICBlcnJvcnM/OiBBcnJheTxFcnJvcj47XG4gICAgZXhwaXJlVGltZXI/OiBudW1iZXI7XG4gICAgbWVzc2FnZVRpbWVyPzogbnVtYmVyOyAvLyBkZXByZWNhdGVkXG4gICAgaXNWaWV3T25jZT86IG51bWJlcjtcbiAgICBmbGFncz86IG51bWJlcjtcbiAgICBzb3VyY2U/OiBzdHJpbmc7XG4gICAgc291cmNlRGV2aWNlPzogbnVtYmVyO1xuICB9ICYgU2hhcmVkTWVzc2FnZVByb3BlcnRpZXMgJlxuICAgIE1lc3NhZ2VTY2hlbWFWZXJzaW9uNSAmXG4gICAgTWVzc2FnZVNjaGVtYVZlcnNpb242ICZcbiAgICBFeHBpcmF0aW9uVGltZXJVcGRhdGVcbj47XG5cbmV4cG9ydCB0eXBlIE91dGdvaW5nTWVzc2FnZSA9IFJlYWRvbmx5PFxuICB7XG4gICAgdHlwZTogJ291dGdvaW5nJztcblxuICAgIC8vIFJlcXVpcmVkXG4gICAgYXR0YWNobWVudHM6IEFycmF5PEF0dGFjaG1lbnRUeXBlPjtcbiAgICBleHBpcmF0aW9uU3RhcnRUaW1lc3RhbXA6IG51bWJlcjtcbiAgICBpZDogc3RyaW5nO1xuICAgIHJlY2VpdmVkX2F0OiBudW1iZXI7XG5cbiAgICAvLyBPcHRpb25hbFxuICAgIGJvZHk/OiBzdHJpbmc7XG4gICAgZXhwaXJlVGltZXI/OiBudW1iZXI7XG4gICAgbWVzc2FnZVRpbWVyPzogbnVtYmVyOyAvLyBkZXByZWNhdGVkXG4gICAgaXNWaWV3T25jZT86IG51bWJlcjtcbiAgICBzeW5jZWQ6IGJvb2xlYW47XG4gIH0gJiBTaGFyZWRNZXNzYWdlUHJvcGVydGllcyAmXG4gICAgTWVzc2FnZVNjaGVtYVZlcnNpb241ICZcbiAgICBFeHBpcmF0aW9uVGltZXJVcGRhdGVcbj47XG5cbmV4cG9ydCB0eXBlIFZlcmlmaWVkQ2hhbmdlTWVzc2FnZSA9IFJlYWRvbmx5PFxuICB7XG4gICAgdHlwZTogJ3ZlcmlmaWVkLWNoYW5nZSc7XG4gIH0gJiBTaGFyZWRNZXNzYWdlUHJvcGVydGllcyAmXG4gICAgTWVzc2FnZVNjaGVtYVZlcnNpb241ICZcbiAgICBFeHBpcmF0aW9uVGltZXJVcGRhdGVcbj47XG5cbmV4cG9ydCB0eXBlIFByb2ZpbGVDaGFuZ2VOb3RpZmljYXRpb25NZXNzYWdlID0gUmVhZG9ubHk8XG4gIHtcbiAgICB0eXBlOiAncHJvZmlsZS1jaGFuZ2UnO1xuICB9ICYgU2hhcmVkTWVzc2FnZVByb3BlcnRpZXMgJlxuICAgIE1lc3NhZ2VTY2hlbWFWZXJzaW9uNSAmXG4gICAgRXhwaXJhdGlvblRpbWVyVXBkYXRlXG4+O1xuXG5leHBvcnQgdHlwZSBTaGFyZWRNZXNzYWdlUHJvcGVydGllcyA9IFJlYWRvbmx5PHtcbiAgY29udmVyc2F0aW9uSWQ6IHN0cmluZztcbiAgc2VudF9hdDogbnVtYmVyO1xuICB0aW1lc3RhbXA6IG51bWJlcjtcbn0+O1xuXG5leHBvcnQgdHlwZSBFeHBpcmF0aW9uVGltZXJVcGRhdGUgPSBQYXJ0aWFsPFxuICBSZWFkb25seTx7XG4gICAgZXhwaXJhdGlvblRpbWVyVXBkYXRlOiBSZWFkb25seTx7XG4gICAgICBleHBpcmVUaW1lcjogbnVtYmVyO1xuICAgICAgZnJvbVN5bmM6IGJvb2xlYW47XG4gICAgICBzb3VyY2U6IHN0cmluZzsgLy8gUGhvbmVOdW1iZXJcbiAgICB9PjtcbiAgfT5cbj47XG5cbmV4cG9ydCB0eXBlIE1lc3NhZ2VTY2hlbWFWZXJzaW9uNSA9IFBhcnRpYWw8XG4gIFJlYWRvbmx5PHtcbiAgICBoYXNBdHRhY2htZW50czogSW5kZXhhYmxlQm9vbGVhbjtcbiAgICBoYXNWaXN1YWxNZWRpYUF0dGFjaG1lbnRzOiBJbmRleGFibGVQcmVzZW5jZTtcbiAgICBoYXNGaWxlQXR0YWNobWVudHM6IEluZGV4YWJsZVByZXNlbmNlO1xuICB9PlxuPjtcblxuZXhwb3J0IHR5cGUgTWVzc2FnZVNjaGVtYVZlcnNpb242ID0gUGFydGlhbDxcbiAgUmVhZG9ubHk8e1xuICAgIGNvbnRhY3Q6IEFycmF5PEVtYmVkZGVkQ29udGFjdFR5cGU+O1xuICB9PlxuPjtcblxuZXhwb3J0IGNvbnN0IGlzVXNlck1lc3NhZ2UgPSAobWVzc2FnZTogTWVzc2FnZSk6IG1lc3NhZ2UgaXMgVXNlck1lc3NhZ2UgPT5cbiAgbWVzc2FnZS50eXBlID09PSAnaW5jb21pbmcnIHx8IG1lc3NhZ2UudHlwZSA9PT0gJ291dGdvaW5nJztcblxuZXhwb3J0IGNvbnN0IGhhc0V4cGlyYXRpb24gPSAobWVzc2FnZTogTWVzc2FnZSk6IGJvb2xlYW4gPT4ge1xuICBpZiAoIWlzVXNlck1lc3NhZ2UobWVzc2FnZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCB7IGV4cGlyZVRpbWVyIH0gPSBtZXNzYWdlO1xuXG4gIHJldHVybiB0eXBlb2YgZXhwaXJlVGltZXIgPT09ICdudW1iZXInICYmIGV4cGlyZVRpbWVyID4gMDtcbn07XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUEyR08sTUFBTSxnQkFBZ0Isd0JBQUMsWUFDNUIsUUFBUSxTQUFTLGNBQWMsUUFBUSxTQUFTLFlBRHJCO0FBR3RCLE1BQU0sZ0JBQWdCLHdCQUFDLFlBQThCO0FBQzFELE1BQUksQ0FBQyxjQUFjLE9BQU8sR0FBRztBQUMzQixXQUFPO0FBQUEsRUFDVDtBQUVBLFFBQU0sRUFBRSxnQkFBZ0I7QUFFeEIsU0FBTyxPQUFPLGdCQUFnQixZQUFZLGNBQWM7QUFDMUQsR0FSNkI7IiwKICAibmFtZXMiOiBbXQp9Cg==
