var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var markConversationRead_exports = {};
__export(markConversationRead_exports, {
  markConversationRead: () => markConversationRead
});
module.exports = __toCommonJS(markConversationRead_exports);
var import_lodash = require("lodash");
var import_message = require("../state/selectors/message");
var import_readReceiptsJobQueue = require("../jobs/readReceiptsJobQueue");
var import_readSyncJobQueue = require("../jobs/readSyncJobQueue");
var import_notifications = require("../services/notifications");
var import_expiringMessagesDeletion = require("../services/expiringMessagesDeletion");
var import_tapToViewMessagesDeletionService = require("../services/tapToViewMessagesDeletionService");
var import_whatTypeOfConversation = require("./whatTypeOfConversation");
var log = __toESM(require("../logging/log"));
var import_idForLogging = require("./idForLogging");
var import_MessageReadStatus = require("../messages/MessageReadStatus");
async function markConversationRead(conversationAttrs, newestUnreadAt, options = {
  sendReadReceipts: true
}) {
  const { id: conversationId } = conversationAttrs;
  const [unreadMessages, unreadReactions] = await Promise.all([
    window.Signal.Data.getUnreadByConversationAndMarkRead({
      conversationId,
      newestUnreadAt,
      readAt: options.readAt,
      isGroup: (0, import_whatTypeOfConversation.isGroup)(conversationAttrs)
    }),
    window.Signal.Data.getUnreadReactionsAndMarkRead({
      conversationId,
      newestUnreadAt
    })
  ]);
  log.info("markConversationRead", {
    conversationId: (0, import_idForLogging.getConversationIdForLogging)(conversationAttrs),
    newestSentAt: options.newestSentAt,
    newestUnreadAt,
    unreadMessages: unreadMessages.length,
    unreadReactions: unreadReactions.length
  });
  if (!unreadMessages.length && !unreadReactions.length) {
    return false;
  }
  import_notifications.notificationService.removeBy({ conversationId });
  const unreadReactionSyncData = /* @__PURE__ */ new Map();
  unreadReactions.forEach((reaction) => {
    const targetKey = `${reaction.targetAuthorUuid}/${reaction.targetTimestamp}`;
    if (unreadReactionSyncData.has(targetKey)) {
      return;
    }
    unreadReactionSyncData.set(targetKey, {
      messageId: reaction.messageId,
      senderE164: void 0,
      senderUuid: reaction.targetAuthorUuid,
      timestamp: reaction.targetTimestamp
    });
  });
  const allReadMessagesSync = unreadMessages.map((messageSyncData) => {
    const message = window.MessageController.getById(messageSyncData.id);
    if (message) {
      message.set((0, import_lodash.omit)(messageSyncData, "originalReadStatus"));
    }
    return {
      messageId: messageSyncData.id,
      originalReadStatus: messageSyncData.originalReadStatus,
      senderE164: messageSyncData.source,
      senderUuid: messageSyncData.sourceUuid,
      senderId: window.ConversationController.ensureContactIds({
        e164: messageSyncData.source,
        uuid: messageSyncData.sourceUuid
      }),
      timestamp: messageSyncData.sent_at,
      hasErrors: message ? (0, import_message.hasErrors)(message.attributes) : false
    };
  });
  const unreadMessagesSyncData = allReadMessagesSync.filter((item) => Boolean(item.senderId) && item.originalReadStatus === import_MessageReadStatus.ReadStatus.Unread && !item.hasErrors);
  const readSyncs = [...unreadMessagesSyncData, ...unreadReactionSyncData.values()];
  if (readSyncs.length && options.sendReadReceipts) {
    log.info(`Sending ${readSyncs.length} read syncs`);
    if (window.ConversationController.areWePrimaryDevice()) {
      log.warn("markConversationRead: We are primary device; not sending read syncs");
    } else {
      import_readSyncJobQueue.readSyncJobQueue.add({ readSyncs });
    }
    await import_readReceiptsJobQueue.readReceiptsJobQueue.addIfAllowedByUser(window.storage, allReadMessagesSync);
  }
  import_expiringMessagesDeletion.expiringMessagesDeletionService.update();
  import_tapToViewMessagesDeletionService.tapToViewMessagesDeletionService.update();
  return true;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  markConversationRead
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFya0NvbnZlcnNhdGlvblJlYWQudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIi8vIENvcHlyaWdodCAyMDIxLTIwMjIgU2lnbmFsIE1lc3NlbmdlciwgTExDXG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQUdQTC0zLjAtb25seVxuXG5pbXBvcnQgeyBvbWl0IH0gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHR5cGUgeyBDb252ZXJzYXRpb25BdHRyaWJ1dGVzVHlwZSB9IGZyb20gJy4uL21vZGVsLXR5cGVzLmQnO1xuaW1wb3J0IHsgaGFzRXJyb3JzIH0gZnJvbSAnLi4vc3RhdGUvc2VsZWN0b3JzL21lc3NhZ2UnO1xuaW1wb3J0IHsgcmVhZFJlY2VpcHRzSm9iUXVldWUgfSBmcm9tICcuLi9qb2JzL3JlYWRSZWNlaXB0c0pvYlF1ZXVlJztcbmltcG9ydCB7IHJlYWRTeW5jSm9iUXVldWUgfSBmcm9tICcuLi9qb2JzL3JlYWRTeW5jSm9iUXVldWUnO1xuaW1wb3J0IHsgbm90aWZpY2F0aW9uU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL25vdGlmaWNhdGlvbnMnO1xuaW1wb3J0IHsgZXhwaXJpbmdNZXNzYWdlc0RlbGV0aW9uU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2V4cGlyaW5nTWVzc2FnZXNEZWxldGlvbic7XG5pbXBvcnQgeyB0YXBUb1ZpZXdNZXNzYWdlc0RlbGV0aW9uU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3RhcFRvVmlld01lc3NhZ2VzRGVsZXRpb25TZXJ2aWNlJztcbmltcG9ydCB7IGlzR3JvdXAgfSBmcm9tICcuL3doYXRUeXBlT2ZDb252ZXJzYXRpb24nO1xuaW1wb3J0ICogYXMgbG9nIGZyb20gJy4uL2xvZ2dpbmcvbG9nJztcbmltcG9ydCB7IGdldENvbnZlcnNhdGlvbklkRm9yTG9nZ2luZyB9IGZyb20gJy4vaWRGb3JMb2dnaW5nJztcbmltcG9ydCB7IFJlYWRTdGF0dXMgfSBmcm9tICcuLi9tZXNzYWdlcy9NZXNzYWdlUmVhZFN0YXR1cyc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYXJrQ29udmVyc2F0aW9uUmVhZChcbiAgY29udmVyc2F0aW9uQXR0cnM6IENvbnZlcnNhdGlvbkF0dHJpYnV0ZXNUeXBlLFxuICBuZXdlc3RVbnJlYWRBdDogbnVtYmVyLFxuICBvcHRpb25zOiB7XG4gICAgcmVhZEF0PzogbnVtYmVyO1xuICAgIHNlbmRSZWFkUmVjZWlwdHM6IGJvb2xlYW47XG4gICAgbmV3ZXN0U2VudEF0PzogbnVtYmVyO1xuICB9ID0ge1xuICAgIHNlbmRSZWFkUmVjZWlwdHM6IHRydWUsXG4gIH1cbik6IFByb21pc2U8Ym9vbGVhbj4ge1xuICBjb25zdCB7IGlkOiBjb252ZXJzYXRpb25JZCB9ID0gY29udmVyc2F0aW9uQXR0cnM7XG5cbiAgY29uc3QgW3VucmVhZE1lc3NhZ2VzLCB1bnJlYWRSZWFjdGlvbnNdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgIHdpbmRvdy5TaWduYWwuRGF0YS5nZXRVbnJlYWRCeUNvbnZlcnNhdGlvbkFuZE1hcmtSZWFkKHtcbiAgICAgIGNvbnZlcnNhdGlvbklkLFxuICAgICAgbmV3ZXN0VW5yZWFkQXQsXG4gICAgICByZWFkQXQ6IG9wdGlvbnMucmVhZEF0LFxuICAgICAgaXNHcm91cDogaXNHcm91cChjb252ZXJzYXRpb25BdHRycyksXG4gICAgfSksXG4gICAgd2luZG93LlNpZ25hbC5EYXRhLmdldFVucmVhZFJlYWN0aW9uc0FuZE1hcmtSZWFkKHtcbiAgICAgIGNvbnZlcnNhdGlvbklkLFxuICAgICAgbmV3ZXN0VW5yZWFkQXQsXG4gICAgfSksXG4gIF0pO1xuXG4gIGxvZy5pbmZvKCdtYXJrQ29udmVyc2F0aW9uUmVhZCcsIHtcbiAgICBjb252ZXJzYXRpb25JZDogZ2V0Q29udmVyc2F0aW9uSWRGb3JMb2dnaW5nKGNvbnZlcnNhdGlvbkF0dHJzKSxcbiAgICBuZXdlc3RTZW50QXQ6IG9wdGlvbnMubmV3ZXN0U2VudEF0LFxuICAgIG5ld2VzdFVucmVhZEF0LFxuICAgIHVucmVhZE1lc3NhZ2VzOiB1bnJlYWRNZXNzYWdlcy5sZW5ndGgsXG4gICAgdW5yZWFkUmVhY3Rpb25zOiB1bnJlYWRSZWFjdGlvbnMubGVuZ3RoLFxuICB9KTtcblxuICBpZiAoIXVucmVhZE1lc3NhZ2VzLmxlbmd0aCAmJiAhdW5yZWFkUmVhY3Rpb25zLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIG5vdGlmaWNhdGlvblNlcnZpY2UucmVtb3ZlQnkoeyBjb252ZXJzYXRpb25JZCB9KTtcblxuICBjb25zdCB1bnJlYWRSZWFjdGlvblN5bmNEYXRhID0gbmV3IE1hcDxcbiAgICBzdHJpbmcsXG4gICAge1xuICAgICAgbWVzc2FnZUlkPzogc3RyaW5nO1xuICAgICAgc2VuZGVyVXVpZD86IHN0cmluZztcbiAgICAgIHNlbmRlckUxNjQ/OiBzdHJpbmc7XG4gICAgICB0aW1lc3RhbXA6IG51bWJlcjtcbiAgICB9XG4gID4oKTtcbiAgdW5yZWFkUmVhY3Rpb25zLmZvckVhY2gocmVhY3Rpb24gPT4ge1xuICAgIGNvbnN0IHRhcmdldEtleSA9IGAke3JlYWN0aW9uLnRhcmdldEF1dGhvclV1aWR9LyR7cmVhY3Rpb24udGFyZ2V0VGltZXN0YW1wfWA7XG4gICAgaWYgKHVucmVhZFJlYWN0aW9uU3luY0RhdGEuaGFzKHRhcmdldEtleSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdW5yZWFkUmVhY3Rpb25TeW5jRGF0YS5zZXQodGFyZ2V0S2V5LCB7XG4gICAgICBtZXNzYWdlSWQ6IHJlYWN0aW9uLm1lc3NhZ2VJZCxcbiAgICAgIHNlbmRlckUxNjQ6IHVuZGVmaW5lZCxcbiAgICAgIHNlbmRlclV1aWQ6IHJlYWN0aW9uLnRhcmdldEF1dGhvclV1aWQsXG4gICAgICB0aW1lc3RhbXA6IHJlYWN0aW9uLnRhcmdldFRpbWVzdGFtcCxcbiAgICB9KTtcbiAgfSk7XG5cbiAgY29uc3QgYWxsUmVhZE1lc3NhZ2VzU3luYyA9IHVucmVhZE1lc3NhZ2VzLm1hcChtZXNzYWdlU3luY0RhdGEgPT4ge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSB3aW5kb3cuTWVzc2FnZUNvbnRyb2xsZXIuZ2V0QnlJZChtZXNzYWdlU3luY0RhdGEuaWQpO1xuICAgIC8vIHdlIHVwZGF0ZSB0aGUgaW4tbWVtb3J5IE1lc3NhZ2VNb2RlbCB3aXRoIHRoZSBmcmVzaCBkYXRhYmFzZSBjYWxsIGRhdGFcbiAgICBpZiAobWVzc2FnZSkge1xuICAgICAgbWVzc2FnZS5zZXQob21pdChtZXNzYWdlU3luY0RhdGEsICdvcmlnaW5hbFJlYWRTdGF0dXMnKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIG1lc3NhZ2VJZDogbWVzc2FnZVN5bmNEYXRhLmlkLFxuICAgICAgb3JpZ2luYWxSZWFkU3RhdHVzOiBtZXNzYWdlU3luY0RhdGEub3JpZ2luYWxSZWFkU3RhdHVzLFxuICAgICAgc2VuZGVyRTE2NDogbWVzc2FnZVN5bmNEYXRhLnNvdXJjZSxcbiAgICAgIHNlbmRlclV1aWQ6IG1lc3NhZ2VTeW5jRGF0YS5zb3VyY2VVdWlkLFxuICAgICAgc2VuZGVySWQ6IHdpbmRvdy5Db252ZXJzYXRpb25Db250cm9sbGVyLmVuc3VyZUNvbnRhY3RJZHMoe1xuICAgICAgICBlMTY0OiBtZXNzYWdlU3luY0RhdGEuc291cmNlLFxuICAgICAgICB1dWlkOiBtZXNzYWdlU3luY0RhdGEuc291cmNlVXVpZCxcbiAgICAgIH0pLFxuICAgICAgdGltZXN0YW1wOiBtZXNzYWdlU3luY0RhdGEuc2VudF9hdCxcbiAgICAgIGhhc0Vycm9yczogbWVzc2FnZSA/IGhhc0Vycm9ycyhtZXNzYWdlLmF0dHJpYnV0ZXMpIDogZmFsc2UsXG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gU29tZSBtZXNzYWdlcyB3ZSdyZSBtYXJraW5nIHJlYWQgYXJlIGxvY2FsIG5vdGlmaWNhdGlvbnMgd2l0aCBubyBzZW5kZXIgb3Igd2VyZSBqdXN0XG4gIC8vICAgdW5zZWVuIGFuZCBub3QgdW5yZWFkLlxuICAvLyBBbHNvLCBpZiBhIG1lc3NhZ2UgaGFzIGVycm9ycywgd2UgZG9uJ3Qgd2FudCB0byBzZW5kIGFueXRoaW5nIG91dCBhYm91dCBpdDpcbiAgLy8gICByZWFkIHN5bmNzIC0gbGV0J3Mgd2FpdCBmb3IgYSBjbGllbnQgdGhhdCByZWFsbHkgdW5kZXJzdGFuZHMgdGhlIG1lc3NhZ2VcbiAgLy8gICAgICB0byBtYXJrIGl0IHJlYWQuIHdlJ2xsIG1hcmsgb3VyIGxvY2FsIGVycm9yIHJlYWQgbG9jYWxseSwgdGhvdWdoLlxuICAvLyAgIHJlYWQgcmVjZWlwdHMgLSBoZXJlIHdlIGNhbiBydW4gaW50byBpbmZpbml0ZSBsb29wcywgd2hlcmUgZWFjaCB0aW1lIHRoZVxuICAvLyAgICAgIGNvbnZlcnNhdGlvbiBpcyB2aWV3ZWQsIGFub3RoZXIgZXJyb3IgbWVzc2FnZSBzaG93cyB1cCBmb3IgdGhlIGNvbnRhY3RcbiAgY29uc3QgdW5yZWFkTWVzc2FnZXNTeW5jRGF0YSA9IGFsbFJlYWRNZXNzYWdlc1N5bmMuZmlsdGVyKFxuICAgIGl0ZW0gPT5cbiAgICAgIEJvb2xlYW4oaXRlbS5zZW5kZXJJZCkgJiZcbiAgICAgIGl0ZW0ub3JpZ2luYWxSZWFkU3RhdHVzID09PSBSZWFkU3RhdHVzLlVucmVhZCAmJlxuICAgICAgIWl0ZW0uaGFzRXJyb3JzXG4gICk7XG5cbiAgY29uc3QgcmVhZFN5bmNzOiBBcnJheTx7XG4gICAgbWVzc2FnZUlkPzogc3RyaW5nO1xuICAgIHNlbmRlckUxNjQ/OiBzdHJpbmc7XG4gICAgc2VuZGVyVXVpZD86IHN0cmluZztcbiAgICBzZW5kZXJJZD86IHN0cmluZztcbiAgICB0aW1lc3RhbXA6IG51bWJlcjtcbiAgICBoYXNFcnJvcnM/OiBzdHJpbmc7XG4gIH0+ID0gWy4uLnVucmVhZE1lc3NhZ2VzU3luY0RhdGEsIC4uLnVucmVhZFJlYWN0aW9uU3luY0RhdGEudmFsdWVzKCldO1xuXG4gIGlmIChyZWFkU3luY3MubGVuZ3RoICYmIG9wdGlvbnMuc2VuZFJlYWRSZWNlaXB0cykge1xuICAgIGxvZy5pbmZvKGBTZW5kaW5nICR7cmVhZFN5bmNzLmxlbmd0aH0gcmVhZCBzeW5jc2ApO1xuICAgIC8vIEJlY2F1c2Ugc3luY1JlYWRNZXNzYWdlcyBzZW5kcyB0byBvdXIgb3RoZXIgZGV2aWNlcywgYW5kIHNlbmRSZWFkUmVjZWlwdHMgZ29lc1xuICAgIC8vICAgdG8gYSBjb250YWN0LCB3ZSBuZWVkIGFjY2Vzc0tleXMgZm9yIGJvdGguXG4gICAgaWYgKHdpbmRvdy5Db252ZXJzYXRpb25Db250cm9sbGVyLmFyZVdlUHJpbWFyeURldmljZSgpKSB7XG4gICAgICBsb2cud2FybihcbiAgICAgICAgJ21hcmtDb252ZXJzYXRpb25SZWFkOiBXZSBhcmUgcHJpbWFyeSBkZXZpY2U7IG5vdCBzZW5kaW5nIHJlYWQgc3luY3MnXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZWFkU3luY0pvYlF1ZXVlLmFkZCh7IHJlYWRTeW5jcyB9KTtcbiAgICB9XG5cbiAgICBhd2FpdCByZWFkUmVjZWlwdHNKb2JRdWV1ZS5hZGRJZkFsbG93ZWRCeVVzZXIoXG4gICAgICB3aW5kb3cuc3RvcmFnZSxcbiAgICAgIGFsbFJlYWRNZXNzYWdlc1N5bmNcbiAgICApO1xuICB9XG5cbiAgZXhwaXJpbmdNZXNzYWdlc0RlbGV0aW9uU2VydmljZS51cGRhdGUoKTtcbiAgdGFwVG9WaWV3TWVzc2FnZXNEZWxldGlvblNlcnZpY2UudXBkYXRlKCk7XG5cbiAgcmV0dXJuIHRydWU7XG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBR0Esb0JBQXFCO0FBR3JCLHFCQUEwQjtBQUMxQixrQ0FBcUM7QUFDckMsOEJBQWlDO0FBQ2pDLDJCQUFvQztBQUNwQyxzQ0FBZ0Q7QUFDaEQsOENBQWlEO0FBQ2pELG9DQUF3QjtBQUN4QixVQUFxQjtBQUNyQiwwQkFBNEM7QUFDNUMsK0JBQTJCO0FBRTNCLG9DQUNFLG1CQUNBLGdCQUNBLFVBSUk7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
