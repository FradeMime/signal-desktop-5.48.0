var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var zkgroup_exports = {};
__export(zkgroup_exports, {
  createProfileKeyCredentialPresentation: () => createProfileKeyCredentialPresentation,
  decryptGroupBlob: () => decryptGroupBlob,
  decryptProfileKey: () => decryptProfileKey,
  decryptProfileKeyCredentialPresentation: () => decryptProfileKeyCredentialPresentation,
  decryptUuid: () => decryptUuid,
  deriveGroupID: () => deriveGroupID,
  deriveGroupPublicParams: () => deriveGroupPublicParams,
  deriveGroupSecretParams: () => deriveGroupSecretParams,
  deriveProfileKeyCommitment: () => deriveProfileKeyCommitment,
  deriveProfileKeyVersion: () => deriveProfileKeyVersion,
  encryptGroupBlob: () => encryptGroupBlob,
  encryptUuid: () => encryptUuid,
  generateProfileKeyCredentialRequest: () => generateProfileKeyCredentialRequest,
  getAuthCredentialPresentation: () => getAuthCredentialPresentation,
  getClientZkAuthOperations: () => getClientZkAuthOperations,
  getClientZkGroupCipher: () => getClientZkGroupCipher,
  getClientZkProfileOperations: () => getClientZkProfileOperations,
  handleProfileKeyCredential: () => handleProfileKeyCredential,
  verifyNotarySignature: () => verifyNotarySignature
});
module.exports = __toCommonJS(zkgroup_exports);
var import_zkgroup = require("@signalapp/libsignal-client/zkgroup");
var import_UUID = require("../types/UUID");
__reExport(zkgroup_exports, require("@signalapp/libsignal-client/zkgroup"), module.exports);
function decryptGroupBlob(clientZkGroupCipher, ciphertext) {
  return clientZkGroupCipher.decryptBlob(Buffer.from(ciphertext));
}
function decryptProfileKeyCredentialPresentation(clientZkGroupCipher, presentationBuffer) {
  const presentation = new import_zkgroup.ProfileKeyCredentialPresentation(Buffer.from(presentationBuffer));
  const uuidCiphertext = presentation.getUuidCiphertext();
  const uuid = clientZkGroupCipher.decryptUuid(uuidCiphertext);
  const profileKeyCiphertext = presentation.getProfileKeyCiphertext();
  const profileKey = clientZkGroupCipher.decryptProfileKey(profileKeyCiphertext, uuid);
  return {
    profileKey: profileKey.serialize(),
    uuid: import_UUID.UUID.cast(uuid)
  };
}
function decryptProfileKey(clientZkGroupCipher, profileKeyCiphertextBuffer, uuid) {
  const profileKeyCiphertext = new import_zkgroup.ProfileKeyCiphertext(Buffer.from(profileKeyCiphertextBuffer));
  const profileKey = clientZkGroupCipher.decryptProfileKey(profileKeyCiphertext, uuid);
  return profileKey.serialize();
}
function decryptUuid(clientZkGroupCipher, uuidCiphertextBuffer) {
  const uuidCiphertext = new import_zkgroup.UuidCiphertext(Buffer.from(uuidCiphertextBuffer));
  return clientZkGroupCipher.decryptUuid(uuidCiphertext);
}
function deriveProfileKeyVersion(profileKeyBase64, uuid) {
  const profileKeyArray = Buffer.from(profileKeyBase64, "base64");
  const profileKey = new import_zkgroup.ProfileKey(profileKeyArray);
  const profileKeyVersion = profileKey.getProfileKeyVersion(uuid);
  return profileKeyVersion.toString();
}
function deriveGroupPublicParams(groupSecretParamsBuffer) {
  const groupSecretParams = new import_zkgroup.GroupSecretParams(Buffer.from(groupSecretParamsBuffer));
  return groupSecretParams.getPublicParams().serialize();
}
function deriveGroupID(groupSecretParamsBuffer) {
  const groupSecretParams = new import_zkgroup.GroupSecretParams(Buffer.from(groupSecretParamsBuffer));
  return groupSecretParams.getPublicParams().getGroupIdentifier().serialize();
}
function deriveGroupSecretParams(masterKeyBuffer) {
  const masterKey = new import_zkgroup.GroupMasterKey(Buffer.from(masterKeyBuffer));
  const groupSecretParams = import_zkgroup.GroupSecretParams.deriveFromMasterKey(masterKey);
  return groupSecretParams.serialize();
}
function encryptGroupBlob(clientZkGroupCipher, plaintext) {
  return clientZkGroupCipher.encryptBlob(Buffer.from(plaintext));
}
function encryptUuid(clientZkGroupCipher, uuidPlaintext) {
  const uuidCiphertext = clientZkGroupCipher.encryptUuid(uuidPlaintext);
  return uuidCiphertext.serialize();
}
function generateProfileKeyCredentialRequest(clientZkProfileCipher, uuid, profileKeyBase64) {
  const profileKeyArray = Buffer.from(profileKeyBase64, "base64");
  const profileKey = new import_zkgroup.ProfileKey(profileKeyArray);
  const context = clientZkProfileCipher.createProfileKeyCredentialRequestContext(uuid, profileKey);
  const request = context.getRequest();
  const requestArray = request.serialize();
  return {
    context,
    requestHex: requestArray.toString("hex")
  };
}
function getAuthCredentialPresentation(clientZkAuthOperations, authCredentialBase64, groupSecretParamsBase64) {
  const authCredential = new import_zkgroup.AuthCredential(Buffer.from(authCredentialBase64, "base64"));
  const secretParams = new import_zkgroup.GroupSecretParams(Buffer.from(groupSecretParamsBase64, "base64"));
  const presentation = clientZkAuthOperations.createAuthCredentialPresentation(secretParams, authCredential);
  return presentation.serialize();
}
function createProfileKeyCredentialPresentation(clientZkProfileCipher, profileKeyCredentialBase64, groupSecretParamsBase64) {
  const profileKeyCredentialArray = Buffer.from(profileKeyCredentialBase64, "base64");
  const profileKeyCredential = new import_zkgroup.ProfileKeyCredential(profileKeyCredentialArray);
  const secretParams = new import_zkgroup.GroupSecretParams(Buffer.from(groupSecretParamsBase64, "base64"));
  const presentation = clientZkProfileCipher.createProfileKeyCredentialPresentation(secretParams, profileKeyCredential);
  return presentation.serialize();
}
function getClientZkAuthOperations(serverPublicParamsBase64) {
  const serverPublicParams = new import_zkgroup.ServerPublicParams(Buffer.from(serverPublicParamsBase64, "base64"));
  return new import_zkgroup.ClientZkAuthOperations(serverPublicParams);
}
function getClientZkGroupCipher(groupSecretParamsBase64) {
  const serverPublicParams = new import_zkgroup.GroupSecretParams(Buffer.from(groupSecretParamsBase64, "base64"));
  return new import_zkgroup.ClientZkGroupCipher(serverPublicParams);
}
function getClientZkProfileOperations(serverPublicParamsBase64) {
  const serverPublicParams = new import_zkgroup.ServerPublicParams(Buffer.from(serverPublicParamsBase64, "base64"));
  return new import_zkgroup.ClientZkProfileOperations(serverPublicParams);
}
function handleProfileKeyCredential(clientZkProfileCipher, context, responseBase64) {
  const response = new import_zkgroup.ProfileKeyCredentialResponse(Buffer.from(responseBase64, "base64"));
  const profileKeyCredential = clientZkProfileCipher.receiveProfileKeyCredential(context, response);
  const credentialArray = profileKeyCredential.serialize();
  return credentialArray.toString("base64");
}
function deriveProfileKeyCommitment(profileKeyBase64, uuid) {
  const profileKeyArray = Buffer.from(profileKeyBase64, "base64");
  const profileKey = new import_zkgroup.ProfileKey(profileKeyArray);
  return profileKey.getCommitment(uuid).contents.toString("base64");
}
function verifyNotarySignature(serverPublicParamsBase64, message, signature) {
  const serverPublicParams = new import_zkgroup.ServerPublicParams(Buffer.from(serverPublicParamsBase64, "base64"));
  const notarySignature = new import_zkgroup.NotarySignature(Buffer.from(signature));
  serverPublicParams.verifySignature(Buffer.from(message), notarySignature);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createProfileKeyCredentialPresentation,
  decryptGroupBlob,
  decryptProfileKey,
  decryptProfileKeyCredentialPresentation,
  decryptUuid,
  deriveGroupID,
  deriveGroupPublicParams,
  deriveGroupSecretParams,
  deriveProfileKeyCommitment,
  deriveProfileKeyVersion,
  encryptGroupBlob,
  encryptUuid,
  generateProfileKeyCredentialRequest,
  getAuthCredentialPresentation,
  getClientZkAuthOperations,
  getClientZkGroupCipher,
  getClientZkProfileOperations,
  handleProfileKeyCredential,
  verifyNotarySignature
});
//# sourceMappingURL=data:application/json;base64,
