var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var context_exports = {};
__export(context_exports, {
  SignalContext: () => SignalContext
});
module.exports = __toCommonJS(context_exports);
var import_electron = require("electron");
var import_Bytes = require("../context/Bytes");
var import_Crypto = require("../context/Crypto");
var import_Timers = require("../context/Timers");
var import_setupI18n = require("../util/setupI18n");
var import_environment = require("../environment");
var import_assert = require("../util/assert");
var import_preload = require("../util/preload");
var import_set_up_renderer_logging = require("../logging/set_up_renderer_logging");
var import_waitForSettingsChange = require("./waitForSettingsChange");
var import_createNativeThemeListener = require("../context/createNativeThemeListener");
var import_OS = require("../OS");
const params = new URLSearchParams(document.location.search);
const configParam = params.get("config");
(0, import_assert.strictAssert)(typeof configParam === "string", "config is not a string");
const config = JSON.parse(configParam);
const { locale } = config;
(0, import_assert.strictAssert)(locale, "locale could not be parsed from config");
(0, import_assert.strictAssert)(typeof locale === "string", "locale is not a string");
const localeMessages = import_electron.ipcRenderer.sendSync("locale-data");
(0, import_environment.setEnvironment)((0, import_environment.parseEnvironment)(config.environment));
(0, import_assert.strictAssert)(Boolean(window.SignalContext), "context must be defined");
(0, import_set_up_renderer_logging.initialize)();
const SignalContext = {
  Settings: {
    themeSetting: (0, import_preload.createSetting)("themeSetting", { setter: false }),
    waitForChange: import_waitForSettingsChange.waitForSettingsChange
  },
  OS: {
    platform: process.platform,
    isWindows: import_OS.isWindows,
    isWindows11: import_OS.isWindows11,
    isLinux: import_OS.isLinux,
    isMacOS: import_OS.isMacOS
  },
  bytes: new import_Bytes.Bytes(),
  config,
  crypto: new import_Crypto.Crypto(),
  getAppInstance: () => config.appInstance ? String(config.appInstance) : void 0,
  getEnvironment: import_environment.getEnvironment,
  getNodeVersion: () => String(config.nodeVersion),
  getVersion: () => String(config.version),
  getPath: (name) => {
    return String(config[`${name}Path`]);
  },
  i18n: (0, import_setupI18n.setupI18n)(locale, localeMessages),
  localeMessages,
  log: window.SignalContext.log,
  nativeThemeListener: (0, import_createNativeThemeListener.createNativeThemeListener)(import_electron.ipcRenderer, window),
  setIsCallActive(isCallActive) {
    import_electron.ipcRenderer.send("set-is-call-active", isCallActive);
  },
  timers: new import_Timers.Timers(),
  async executeMenuRole(role) {
    await import_electron.ipcRenderer.invoke("executeMenuRole", role);
  },
  async getMainWindowStats() {
    return import_electron.ipcRenderer.invoke("getMainWindowStats");
  },
  async getMenuOptions() {
    return import_electron.ipcRenderer.invoke("getMenuOptions");
  },
  async executeMenuAction(action) {
    return import_electron.ipcRenderer.invoke("executeMenuAction", action);
  }
};
window.SignalContext = SignalContext;
window.i18n = SignalContext.i18n;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  SignalContext
});
//# sourceMappingURL=data:application/json;base64,
