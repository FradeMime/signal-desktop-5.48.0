var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var import_shims = require("../shims");
var import_react = __toESM(require("react"));
var import_react_dom = __toESM(require("react-dom"));
var import_electron = require("electron");
var import_context = require("../context");
var Settings = __toESM(require("../../types/Settings"));
var import_Preferences = require("../../components/Preferences");
var import_SystemTraySetting = require("../../types/SystemTraySetting");
var import_awaitObject = require("../../util/awaitObject");
var import_preload = require("../../util/preload");
var import_startInteractionMode = require("../startInteractionMode");
function doneRendering() {
  import_electron.ipcRenderer.send("settings-done-rendering");
}
const settingAudioNotification = (0, import_preload.createSetting)("audioNotification");
const settingAutoDownloadUpdate = (0, import_preload.createSetting)("autoDownloadUpdate");
const settingAutoLaunch = (0, import_preload.createSetting)("autoLaunch");
const settingCallRingtoneNotification = (0, import_preload.createSetting)("callRingtoneNotification");
const settingCallSystemNotification = (0, import_preload.createSetting)("callSystemNotification");
const settingCountMutedConversations = (0, import_preload.createSetting)("countMutedConversations");
const settingDeviceName = (0, import_preload.createSetting)("deviceName", { setter: false });
const settingHideMenuBar = (0, import_preload.createSetting)("hideMenuBar");
const settingIncomingCallNotification = (0, import_preload.createSetting)("incomingCallNotification");
const settingMediaCameraPermissions = (0, import_preload.createSetting)("mediaCameraPermissions");
const settingMediaPermissions = (0, import_preload.createSetting)("mediaPermissions");
const settingNotificationDrawAttention = (0, import_preload.createSetting)("notificationDrawAttention");
const settingNotificationSetting = (0, import_preload.createSetting)("notificationSetting");
const settingRelayCalls = (0, import_preload.createSetting)("alwaysRelayCalls");
const settingSpellCheck = (0, import_preload.createSetting)("spellCheck");
const settingTheme = (0, import_preload.createSetting)("themeSetting");
const settingSystemTraySetting = (0, import_preload.createSetting)("systemTraySetting");
const settingLastSyncTime = (0, import_preload.createSetting)("lastSyncTime");
const settingZoomFactor = (0, import_preload.createSetting)("zoomFactor");
const settingBlockedCount = (0, import_preload.createSetting)("blockedCount");
const settingLinkPreview = (0, import_preload.createSetting)("linkPreviewSetting", {
  setter: false
});
const settingPhoneNumberDiscoverability = (0, import_preload.createSetting)("phoneNumberDiscoverabilitySetting", { setter: false });
const settingPhoneNumberSharing = (0, import_preload.createSetting)("phoneNumberSharingSetting", {
  setter: false
});
const settingReadReceipts = (0, import_preload.createSetting)("readReceiptSetting", {
  setter: false
});
const settingTypingIndicators = (0, import_preload.createSetting)("typingIndicatorSetting", {
  setter: false
});
const settingAudioInput = (0, import_preload.createSetting)("preferredAudioInputDevice");
const settingAudioOutput = (0, import_preload.createSetting)("preferredAudioOutputDevice");
const settingVideoInput = (0, import_preload.createSetting)("preferredVideoInputDevice");
const settingUniversalExpireTimer = (0, import_preload.createSetting)("universalExpireTimer");
const ipcGetAvailableIODevices = (0, import_preload.createCallback)("getAvailableIODevices");
const ipcGetCustomColors = (0, import_preload.createCallback)("getCustomColors");
const ipcIsSyncNotSupported = (0, import_preload.createCallback)("isPrimary");
const ipcMakeSyncRequest = (0, import_preload.createCallback)("syncRequest");
const ipcPNP = (0, import_preload.createCallback)("isPhoneNumberSharingEnabled");
const ipcGetDefaultConversationColor = (0, import_preload.createCallback)("getDefaultConversationColor");
const ipcGetConversationsWithCustomColor = (0, import_preload.createCallback)("getConversationsWithCustomColor");
const ipcAddCustomColor = (0, import_preload.createCallback)("addCustomColor");
const ipcEditCustomColor = (0, import_preload.createCallback)("editCustomColor");
const ipcRemoveCustomColor = (0, import_preload.createCallback)("removeCustomColor");
const ipcRemoveCustomColorOnConversations = (0, import_preload.createCallback)("removeCustomColorOnConversations");
const ipcResetAllChatColors = (0, import_preload.createCallback)("resetAllChatColors");
const ipcResetDefaultChatColor = (0, import_preload.createCallback)("resetDefaultChatColor");
const ipcSetGlobalDefaultConversationColor = (0, import_preload.createCallback)("setGlobalDefaultConversationColor");
const DEFAULT_NOTIFICATION_SETTING = "message";
function getSystemTraySettingValues(systemTraySetting) {
  const parsedSystemTraySetting = (0, import_SystemTraySetting.parseSystemTraySetting)(systemTraySetting);
  const hasMinimizeToAndStartInSystemTray = parsedSystemTraySetting === import_SystemTraySetting.SystemTraySetting.MinimizeToAndStartInSystemTray;
  const hasMinimizeToSystemTray = (0, import_SystemTraySetting.shouldMinimizeToSystemTray)(parsedSystemTraySetting);
  return {
    hasMinimizeToAndStartInSystemTray,
    hasMinimizeToSystemTray
  };
}
const renderPreferences = /* @__PURE__ */ __name(async () => {
  (0, import_startInteractionMode.startInteractionMode)();
  const {
    blockedCount,
    deviceName,
    hasAudioNotifications,
    hasAutoDownloadUpdate,
    hasAutoLaunch,
    hasCallNotifications,
    hasCallRingtoneNotification,
    hasCountMutedConversations,
    hasHideMenuBar,
    hasIncomingCallNotifications,
    hasLinkPreviews,
    hasMediaCameraPermissions,
    hasMediaPermissions,
    hasNotificationAttention,
    hasReadReceipts,
    hasRelayCalls,
    hasSpellCheck,
    hasTypingIndicators,
    isPhoneNumberSharingSupported,
    lastSyncTime,
    notificationContent,
    selectedCamera,
    selectedMicrophone,
    selectedSpeaker,
    systemTraySetting,
    themeSetting,
    universalExpireTimer,
    whoCanFindMe,
    whoCanSeeMe,
    zoomFactor,
    availableIODevices,
    customColors,
    isSyncNotSupported,
    defaultConversationColor
  } = await (0, import_awaitObject.awaitObject)({
    blockedCount: settingBlockedCount.getValue(),
    deviceName: settingDeviceName.getValue(),
    hasAudioNotifications: settingAudioNotification.getValue(),
    hasAutoDownloadUpdate: settingAutoDownloadUpdate.getValue(),
    hasAutoLaunch: settingAutoLaunch.getValue(),
    hasCallNotifications: settingCallSystemNotification.getValue(),
    hasCallRingtoneNotification: settingCallRingtoneNotification.getValue(),
    hasCountMutedConversations: settingCountMutedConversations.getValue(),
    hasHideMenuBar: settingHideMenuBar.getValue(),
    hasIncomingCallNotifications: settingIncomingCallNotification.getValue(),
    hasLinkPreviews: settingLinkPreview.getValue(),
    hasMediaCameraPermissions: settingMediaCameraPermissions.getValue(),
    hasMediaPermissions: settingMediaPermissions.getValue(),
    hasNotificationAttention: settingNotificationDrawAttention.getValue(),
    hasReadReceipts: settingReadReceipts.getValue(),
    hasRelayCalls: settingRelayCalls.getValue(),
    hasSpellCheck: settingSpellCheck.getValue(),
    hasTypingIndicators: settingTypingIndicators.getValue(),
    isPhoneNumberSharingSupported: ipcPNP(),
    lastSyncTime: settingLastSyncTime.getValue(),
    notificationContent: settingNotificationSetting.getValue(),
    selectedCamera: settingVideoInput.getValue(),
    selectedMicrophone: settingAudioInput.getValue(),
    selectedSpeaker: settingAudioOutput.getValue(),
    systemTraySetting: settingSystemTraySetting.getValue(),
    themeSetting: settingTheme.getValue(),
    universalExpireTimer: settingUniversalExpireTimer.getValue(),
    whoCanFindMe: settingPhoneNumberDiscoverability.getValue(),
    whoCanSeeMe: settingPhoneNumberSharing.getValue(),
    zoomFactor: settingZoomFactor.getValue(),
    availableIODevices: ipcGetAvailableIODevices(),
    customColors: ipcGetCustomColors(),
    isSyncNotSupported: ipcIsSyncNotSupported(),
    defaultConversationColor: ipcGetDefaultConversationColor()
  });
  const { availableCameras, availableMicrophones, availableSpeakers } = availableIODevices;
  const { hasMinimizeToAndStartInSystemTray, hasMinimizeToSystemTray } = getSystemTraySettingValues(systemTraySetting);
  const props = {
    availableCameras,
    availableMicrophones,
    availableSpeakers,
    blockedCount,
    customColors,
    defaultConversationColor,
    deviceName,
    hasAudioNotifications,
    hasAutoDownloadUpdate,
    hasAutoLaunch,
    hasCallNotifications,
    hasCallRingtoneNotification,
    hasCountMutedConversations,
    hasHideMenuBar,
    hasIncomingCallNotifications,
    hasLinkPreviews,
    hasMediaCameraPermissions,
    hasMediaPermissions,
    hasMinimizeToAndStartInSystemTray,
    hasMinimizeToSystemTray,
    hasNotificationAttention,
    hasNotifications: notificationContent !== "off",
    hasReadReceipts,
    hasRelayCalls,
    hasSpellCheck,
    hasTypingIndicators,
    lastSyncTime,
    notificationContent,
    selectedCamera,
    selectedMicrophone,
    selectedSpeaker,
    themeSetting,
    universalExpireTimer,
    whoCanFindMe,
    whoCanSeeMe,
    zoomFactor,
    addCustomColor: ipcAddCustomColor,
    closeSettings: () => import_context.SignalContext.executeMenuRole("close"),
    doDeleteAllData: () => import_electron.ipcRenderer.send("delete-all-data"),
    doneRendering,
    editCustomColor: ipcEditCustomColor,
    getConversationsWithCustomColor: ipcGetConversationsWithCustomColor,
    initialSpellCheckSetting: import_context.SignalContext.config.appStartInitialSpellcheckSetting,
    makeSyncRequest: ipcMakeSyncRequest,
    removeCustomColor: ipcRemoveCustomColor,
    removeCustomColorOnConversations: ipcRemoveCustomColorOnConversations,
    resetAllChatColors: ipcResetAllChatColors,
    resetDefaultChatColor: ipcResetDefaultChatColor,
    setGlobalDefaultConversationColor: ipcSetGlobalDefaultConversationColor,
    isAudioNotificationsSupported: Settings.isAudioNotificationSupported(),
    isAutoDownloadUpdatesSupported: Settings.isAutoDownloadUpdatesSupported(),
    isAutoLaunchSupported: Settings.isAutoLaunchSupported(),
    isHideMenuBarSupported: Settings.isHideMenuBarSupported(),
    isNotificationAttentionSupported: Settings.isDrawAttentionSupported(),
    isPhoneNumberSharingSupported,
    isSyncSupported: !isSyncNotSupported,
    isSystemTraySupported: Settings.isSystemTraySupported(import_context.SignalContext.getVersion()),
    onAudioNotificationsChange: reRender(settingAudioNotification.setValue),
    onAutoDownloadUpdateChange: reRender(settingAutoDownloadUpdate.setValue),
    onAutoLaunchChange: reRender(settingAutoLaunch.setValue),
    onCallNotificationsChange: reRender(settingCallSystemNotification.setValue),
    onCallRingtoneNotificationChange: reRender(settingCallRingtoneNotification.setValue),
    onCountMutedConversationsChange: reRender(settingCountMutedConversations.setValue),
    onHideMenuBarChange: reRender(settingHideMenuBar.setValue),
    onIncomingCallNotificationsChange: reRender(settingIncomingCallNotification.setValue),
    onLastSyncTimeChange: reRender(settingLastSyncTime.setValue),
    onMediaCameraPermissionsChange: reRender(settingMediaCameraPermissions.setValue),
    onMinimizeToAndStartInSystemTrayChange: reRender(async (value) => {
      await settingSystemTraySetting.setValue(value ? import_SystemTraySetting.SystemTraySetting.MinimizeToAndStartInSystemTray : import_SystemTraySetting.SystemTraySetting.MinimizeToSystemTray);
      return value;
    }),
    onMinimizeToSystemTrayChange: reRender(async (value) => {
      await settingSystemTraySetting.setValue(value ? import_SystemTraySetting.SystemTraySetting.MinimizeToSystemTray : import_SystemTraySetting.SystemTraySetting.DoNotUseSystemTray);
      return value;
    }),
    onMediaPermissionsChange: reRender(settingMediaPermissions.setValue),
    onNotificationAttentionChange: reRender(settingNotificationDrawAttention.setValue),
    onNotificationContentChange: reRender(settingNotificationSetting.setValue),
    onNotificationsChange: reRender(async (value) => {
      await settingNotificationSetting.setValue(value ? DEFAULT_NOTIFICATION_SETTING : "off");
      return value;
    }),
    onRelayCallsChange: reRender(settingRelayCalls.setValue),
    onSelectedCameraChange: reRender(settingVideoInput.setValue),
    onSelectedMicrophoneChange: reRender(settingAudioInput.setValue),
    onSelectedSpeakerChange: reRender(settingAudioOutput.setValue),
    onSpellCheckChange: reRender(settingSpellCheck.setValue),
    onThemeChange: reRender(settingTheme.setValue),
    onUniversalExpireTimerChange: reRender(settingUniversalExpireTimer.setValue),
    onZoomFactorChange: settingZoomFactor.setValue,
    i18n: import_context.SignalContext.i18n,
    platform: process.platform,
    isWindows11: import_context.SignalContext.OS.isWindows11(),
    executeMenuRole: import_context.SignalContext.executeMenuRole
  };
  function reRender(f) {
    return async (value) => {
      await f(value);
      renderPreferences();
    };
  }
  import_react_dom.default.render(import_react.default.createElement(import_Preferences.Preferences, props), document.getElementById("app"));
}, "renderPreferences");
import_electron.ipcRenderer.on("preferences-changed", () => renderPreferences());
import_electron.contextBridge.exposeInMainWorld("SignalContext", {
  ...import_context.SignalContext,
  renderWindow: renderPreferences
});
//# sourceMappingURL=data:application/json;base64,
